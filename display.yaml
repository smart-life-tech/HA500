# ESPHome configuration for Guition ESP32-S3-4848S040
substitutions:
  name: "guition-esp32-s3-4848s040"
  friendly_name: "Guition Smart Display"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key

# Wi-Fi configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Guition Fallback AP"
    password: !secret wifi_fallback_password

# Web server for control
web_server:
  port: 80

# Time component for clock with minute-by-minute checks
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      # Check every minute
      - seconds: 0
        minutes: /1
        then:
          - lambda: |-
              // Check if it's 30 minutes before sunrise
              auto now = id(homeassistant_time).now();
              auto sunrise_opt = id(ha_sun).sunrise(0); // Pass 0 degrees as the elevation angle
              
              // Only proceed if we have a valid sunrise time
              if (sunrise_opt.has_value()) {
                auto sunrise = sunrise_opt.value();
                if (sunrise.timestamp - now.timestamp <= 1800 && sunrise.timestamp - now.timestamp > 1740) {
                  id(sw1).turn_on();
                }
              }
              
              // Check for seasonal time for SW2
              int month = now.month;
              if (now.hour == 12 && now.minute == 0) {
                // Run the seasonal timer at noon
                int hours = (month >= 3 && month <= 9) ? 6 : 1;  // Summer: Mar-Sep, Winter: Oct-Feb
                
                // Temperature adjustment
                float temp = id(outdoor_temp).state;
                if (temp > 22.0) {
                  float extra_time = (temp - 22.0) * 0.1;  // 10% per 10°C
                  hours = hours * (1.0 + extra_time);
                }
                
                id(sw2).turn_on();
                id(sw2_off_time) = id(homeassistant_time).now().timestamp + hours * 3600;
              }
              
              // Check if it's time to turn off SW2
              if (id(sw2).state && now.timestamp >= id(sw2_off_time)) {
                id(sw2).turn_off();
              }
              
              // Check weather conditions for SW3
              float temp = id(outdoor_temp).state;
              float rain = id(precipitation).state;
              if ((temp > 35.0 || rain > 10.0) && !id(sw3).state) {
                id(sw3).turn_on();
                id(sw3_off_time) = id(homeassistant_time).now().timestamp + 2 * 3600;
              }
              
              // Check if it's time to turn off SW3
              if (id(sw3).state && now.timestamp >= id(sw3_off_time)) {
                id(sw3).turn_off();
              }

# Sun component for sunrise/sunset
sun:
  latitude: 52.3676  # Amsterdam latitude
  longitude: 4.9041  # Amsterdam longitude
  id: ha_sun
  on_sunrise:
    then:
      - switch.turn_off: sw1
  on_sunset:
    then:
      - script.execute: sw1_sunset_timer

# SPI for display
spi:
  clk_pin: GPIO48
  mosi_pin: GPIO47
  miso_pin: GPIO41

# Display configuration for 480x480 TFT display
display:
  - platform: ili9xxx
    invert_colors: true
    model: ST7796
    id: main_display
    dimensions:
      width: 480
      height: 480
    dc_pin: GPIO7
    reset_pin: GPIO6
    cs_pin: GPIO5
    rotation: 0
    update_interval: 1s
    lambda: |-
      // Title
      it.rectangle(0, 0, 480, 60, id(blue_color));
      it.print(240, 30, id(title_font), id(white_color), TextAlign::CENTER, "Smart Light Control");
      
      // Time display
      it.strftime(240, 100, id(large_font), id(black_color), TextAlign::CENTER, "%H:%M:%S", id(homeassistant_time).now());
      it.strftime(240, 140, id(medium_font), id(dark_gray_color), TextAlign::CENTER, "%A, %B %d", id(homeassistant_time).now());
      
      // Switch status boxes
      // SW1
      it.rectangle(40, 200, 400, 70, id(sw1).state ? id(green_color) : id(light_gray_color));
      it.print(240, 235, id(medium_font), id(white_color), TextAlign::CENTER, "Sunrise/Sunset Light: %s", id(sw1).state ? "ON" : "OFF");
      
      // SW2
      it.rectangle(40, 290, 400, 70, id(sw2).state ? id(green_color) : id(light_gray_color));
      it.print(240, 325, id(medium_font), id(white_color), TextAlign::CENTER, "Seasonal Daytime Light: %s", id(sw2).state ? "ON" : "OFF");
      
      // SW3
      it.rectangle(40, 380, 400, 70, id(sw3).state ? id(green_color) : id(light_gray_color));
      it.print(240, 415, id(medium_font), id(white_color), TextAlign::CENTER, "Weather-Based Light: %s", id(sw3).state ? "ON" : "OFF");

# Fonts
font:
  - file: "fonts/Roboto-Medium.ttf"
    id: title_font
    size: 24
  - file: "fonts/Roboto-Medium.ttf"
    id: large_font
    size: 36
  - file: "fonts/Roboto-Medium.ttf"
    id: medium_font
    size: 20

# Colors
color:
  - id: blue_color
    red: 0%
    green: 0%
    blue: 100%
  - id: green_color
    red: 0%
    green: 100%
    blue: 0%
  - id: white_color
    red: 100%
    green: 100%
    blue: 100%
  - id: black_color
    red: 0%
    green: 0%
    blue: 0%
  - id: light_gray_color
    red: 80%
    green: 80%
    blue: 80%
  - id: dark_gray_color
    red: 20%
    green: 20%
    blue: 20%

# Outputs for relays
output:
  - platform: ledc
    pin: GPIO38
    id: backlight_output
    frequency: 1000 Hz
  - platform: gpio
    pin: GPIO40
    id: relay1_output
  - platform: gpio
    pin: GPIO1
    id: relay2_output
  - platform: gpio
    pin: GPIO2
    id: relay3_output

# Backlight control
light:
  - platform: monochromatic
    output: backlight_output
    name: "Display Backlight"
    id: backlight
    restore_mode: ALWAYS_ON

# Switches for the three functions
switch:
  - platform: output
    id: sw1
    name: "Sunrise/Sunset Light"
    output: relay1_output
  - platform: output
    id: sw2
    name: "Seasonal Daytime Light"
    output: relay2_output
  - platform: output
    id: sw3
    name: "Weather-Based Light"
    output: relay3_output

# Sensors for Home Assistant data
sensor:
  - platform: homeassistant
    id: outdoor_temp
    entity_id: sensor.weather_temperature
    unit_of_measurement: "°C"
  - platform: homeassistant
    id: precipitation
    entity_id: sensor.weather_precipitation
    unit_of_measurement: "mm"

# Global variables for timer tracking
globals:
  - id: sw2_off_time
    type: int
    restore_value: no
    initial_value: "0"
  - id: sw3_off_time
    type: int
    restore_value: no
    initial_value: "0"

# Scripts for automation logic
script:
  - id: sw1_sunset_timer
    then:
      - switch.turn_on: sw1
      - delay: 2h
      - switch.turn_off: sw1

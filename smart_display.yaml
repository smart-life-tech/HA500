substitutions:
  name: "guition-esp32-s3-4848s040"
  friendly_name: "Guition Smart Light Control"
  device_description: "Guition ESP32-S3-4848S040 Smart Light Controller"
  project_name: "Guition.ESP32_S3_4848S040"
  project_version: "1.0.2"

  lightbulb: "\U000F0335"
  ceiling_light: "\U000F0769"
  lamp: "\U000F06B5"
  floor_lamp: "\U000F08DD"
  string_lights: "\U000F12BA"
  settings_icon: "\U000F0493"
  home_icon: "\U000F02DC"
  sun_icon: "\U000F0599"
  moon_icon: "\U000F0F64"
  rain_icon: "\U000F0596"
  thermometer_icon: "\U000F050F"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  project:
    name: "${project_name}"
    version: "${project_version}"
  platformio_options:
    board_build.flash_mode: dio
    build_unflags: "-f"
    build_flags: "-shared"
    

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      COMPILER_OPTIMIZATION_SIZE: y
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: octal
  speed: 80MHz

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key
  id: api_server
  on_client_connected:
    then:
      - logger.log: "API DEBUG: Home Assistant connected"
      - delay: 2s
      - script.execute: time_update
  on_client_disconnected:
    then:
      - logger.log: "API DEBUG: Home Assistant disconnected"
      - script.execute: time_update
ota:
  - platform: esphome
    id: my_ota
    password: !secret ota_password
    on_begin:
      then:
        - logger.log: "OTA start"
        - light.turn_on: backlight
        - lvgl.resume:
        - lvgl.widget.show: popup_obj
        - lvgl.resume:
        - lvgl.widget.redraw:
    on_progress:
        then:
          - lvgl.bar.update:
              id: popup_pb_percentage
              value: !lambda "return (int)x;"
          - lvgl.label.update:
              id: popup_lbl_percentage
              text:
                format: "OTA progress %0.1f%%"
                args: ["x"]
          - lambda: "id(lvgl_comp).loop();"  

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Add these parameters for better connection reliability
  power_save_mode: NONE
  fast_connect: true
  reboot_timeout: 15min
  
  # Existing fallback AP configuration
  ap:
    ssid: "PhiJo Smart Products Fallback"
    password: !secret wifi_fallback_password
  
  # Existing event handlers
  on_connect:
    then:
      - logger.log: "WiFi connected, starting web server"
      #- component.update: web_server  # Uncommented and corrected
      - delay: 1s
      - script.execute: notify_web_portal
  on_disconnect:
    then:
      - logger.log: "WiFi disconnected, attempting to reconnect"
      - script.execute: notify_web_portal
time:
  - platform: homeassistant
    id: time_comp
    timezone: "Europe/Lisbon"
    on_time_sync:
      then:
        - logger.log: "TIME DEBUG: Time synchronized with Home Assistant"
        - script.execute: time_update
    on_time:
      # Update clock display every minute
      - minutes: '*'
        seconds: 0
        then:
          - script.execute: time_update
      
      # Check for sunrise/sunset events and other automations
      - seconds: 0
        minutes: /1
        then:
          - script.execute: check_light_schedules
  
  # Add SNTP as fallback when Home Assistant is unavailable
  - platform: sntp
    id: sntp_time
    timezone: "Europe/Lisbon"
    servers:
      - "pool.ntp.org"
      - "time.nist.gov"
      - "time.google.com"
    on_time_sync:
      then:
        - logger.log: "TIME DEBUG: Time synchronized with SNTP server"
        - if:
            condition:
              not:
                api.connected:
            then:
              - script.execute: time_update    

web_server:
  port: 80

captive_portal:


# For the sun component, we need to use fixed values initially
sun:
  latitude: 37.1  # Default value matching the initial_value in location_latitude
  longitude: -8.0  # Default value matching the initial_value in location_longitude
  id: sun_comp

# Add this to update the sun component when location changes
number:
  - platform: template
    id: location_latitude
    name: "Location Latitude"
    min_value: -90
    max_value: 90
    step: 0.01
    restore_value: true
    initial_value: 37.1  # Default to a central location
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(sun_comp).set_latitude(id(location_latitude).state);
    
  - platform: template
    id: location_longitude
    name: "Location Longitude"
    min_value: -180
    max_value: 180
    step: 0.01
    restore_value: true
    initial_value: -8.0  # Default to a central location
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(sun_comp).set_longitude(id(location_longitude).state);

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      id: ip_address
      entity_category: diagnostic
      on_value:
        then:
          - lvgl.label.update:
              id: ip_address_label
              text:
                format: "%s"
                args: [ 'id(ip_address).get_state().c_str()' ]
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      entity_category: diagnostic
      
  - platform: template
    id: location_name
    name: "Weather Location"
    lambda: |-
      return {id(location_name_str)};

color:
  # Create a Home Assistant blue color
  - id: ha_blue
    hex: 51c0f2
  - id: green_color
    red: 0%
    green: 60%
    blue: 0%
  - id: red_color
    red: 80%
    green: 0%
    blue: 0%
  - id: orange_color
    red: 100%
    green: 60%
    blue: 0%
  - id: blue_color
    red: 0%
    green: 40%
    blue: 100%

# Global variables for timer tracking and settings
globals:
  - id: location_name_str
    type: std::string
    restore_value: yes
    initial_value: '"Sao Bartolomeu de Messines, Portugal"'
  # Timer tracking
  - id: sw1_off_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw2_off_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw3_off_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw1_before_sunrise
    type: bool
    restore_value: yes
    initial_value: "false"
    
  # Manual override tracking
  - id: sw1_manual_override_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw2_manual_override_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw3_manual_override_time
    type: int
    restore_value: yes
    initial_value: "0"
    
  # SW3 mode (winter/summer)
  - id: sw3_winter_mode
    type: bool
    restore_value: yes
    initial_value: "false"  # Default to summer mode
    
  # Current page tracking
  - id: current_page
    type: int
    restore_value: no
    initial_value: "0"  # 0 = main page, 1 = settings page

#-------------------------------------------
# LVGL Interface
#-------------------------------------------
lvgl:
  id: lvgl_comp
  displays:
    - my_display
  touchscreens:
    - touchscreen_id: my_touchscreen
  
  bg_color: 0x000000
  
  on_idle:
    - timeout: 15s
      then:
        - logger.log: idle 15s timeout
        - light.turn_off:
            id: backlight
            transition_length: 5s
        - lvgl.pause:
            show_snow: true

  style_definitions:
    - id: style_line
      line_color: 0x0000FF
      line_width: 8
      line_rounded: true
    - id: date_style
      text_font: roboto24
      align: center
      text_color: 0x333333
      bg_opa: cover
      radius: 4
      pad_all: 2
    - id: switch_style_on
      bg_color: 0x00AA00
      text_color: 0xFFFFFF
    - id: switch_style_off
      bg_color: 0x555555
      text_color: 0xCCCCCC
    - id: nav_button_style
      bg_color: 0x444444
      text_color: 0xFFFFFF
      radius: 15
      pad_all: 5
    - id: title_style
      bg_color: 0x1E3A8A
      text_color: 0xFFFFFF
      text_font: roboto24
      radius: 10
      pad_all: 8

  theme:
    button:
      text_font: roboto24
      scroll_on_focus: true
      radius: 25
      width: 150
      height: 60
      pad_left: 10px
      pad_top: 10px
      pad_bottom: 10px
      pad_right: 10px
      shadow_width: 0
      bg_color: 0x313131
      text_color: 0xB6B6B6
      checked:
        bg_color: 0xCC5E14
        text_color: 0xB6B6B6

  page_wrap: true
  pages:
    # Main Page - Dashboard with Clock, Date, Weather
    - id: main_page
      skip: false
      bg_color: 0x000000
      bg_opa: cover
      pad_all: 0
      border_width: 0
      widgets:
        # Background image - fixed position
        - image:
            src: background_image
            x: 0
            y: 0
            width: 480
            height: 480
        
        # Title Bar
        - obj:
            width: 460
            height: 60
            bg_color: 0x1E3A8A
            bg_opa: 20%
            radius: 10
            x: 10
            y: 10
            widgets:
              - label:
                  text: "PHIJO SMART DEVICE SCREEN"
                  text_font: roboto24
                  align: center
                  text_color: 0xFFFFFF
                  x: 0
                  y: 12
        - obj:
            width: 460
            height: 140
            bg_color: 0x1E3A8A
            bg_opa: 30%
            radius: 10
            x: 10
            y: 75
            widgets:
              # Clock - positioned below title (fixed positioning)
              - label:
                  id: digital_clock
                  text: "06:00"
                  text_font: roboto_large
                  align: center
                  text_color: 0xFFFFFF
                  x: 150
                  y:   0
                  width: 480             
              
              # Date - positioned below clock (fixed positioning)
              - label:
                  id: full_date_label
                  text: "Date will appear here"
                  text_font: roboto24
                  align: center
                  text_color: 0xFFFFFF
                  x: 150
                  y: 45
                  width: 480
          
        # Weather section - semi-transparent overlay
        - obj:
            width: 460
            height: 120
            bg_color: 0x000000
            bg_opa: 80%
            radius: 10
            pad_all: 10
            x: 10
            y: 210
            widgets:
              - label:
                  id: weather_label
                  text: "Loading weather..."
                  text_font: roboto24
                  text_color: 0xCCCCCC
                  align: center
                  x: 0
                  y: 10
              - label:
                  id: temperature_label
                  text: "Temperature: --°C"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  align: center
                  x: 0
                  y: 40
              - label:
                  id: weather_forecast
                  text: "Forecast unavailable"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  align: center
                  x: 0
                  y: 65
        
        # Status and IP section
        - obj:
            width: 460
            height: 60
            bg_color: 0x000000
            bg_opa: 50%
            radius: 10
            x: 10
            y: 350
            widgets:
              - label:
                  id: status_label
                  text: "Ready"
                  text_color: 0xFFFFFF
                  text_font: roboto
                  align: center
                  x: 0
                  y: 5
              - label:
                  id: ip_address_label
                  align: center
                  text: 'WiFi: Not connected'
                  text_color: ha_blue
                  text_font: roboto
                  x: 0
                  y: 30
        
        # Navigation buttons
        - button:
            id: controls_nav_button
            x: 10
            y: 450
            width: 100
            height: 35
            styles: nav_button_style
            widgets:
              - label:
                  text: "Controls"
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lvgl.page.next:
        
        - button:
            id: settings_nav_button
            x: 120
            y: 450
            width: 100
            height: 35
            styles: nav_button_style
            widgets:
              - label:
                  text: "Settings"
                  text_font: roboto
                  align: center
            on_click:
              then:
                - script.execute: goto_settings
                - lvgl.page.previous:

    
    # Controls Page - Light Control Buttons
    - id: controls_page
      skip: false
      bg_color: 0x000000
      bg_opa: cover
      pad_all: 0
      border_width: 0
      widgets:
        # Background image for controls page
        - image:
            src: background_image
            x: 0
            y: 0
            width: 480
            height: 480
        
        # Title Bar
        - obj:
            width: 460
            height: 50
            bg_color: 0x1E3A8A
            bg_opa: 80%
            radius: 10
            x: 10
            y: 10
            widgets:
              - label:
                  text: "LIGHT CONTROLS"
                  text_font: roboto24
                  align: center
                  text_color: 0xFFFFFF
                  x: 0
                  y: 12
        
        # Switch 1 - Sunrise/Sunset Light
        - button:
            id: sw1_button
            width: 400
            height: 70
            x: 40
            y: 100
            checkable: true
            widgets:
              - label:
                  text: "${sun_icon} Sunrise/Sunset Light"
                  text_font: roboto24
                  align: center
            on_click:
              then:
                - switch.toggle: sw1
                - lambda: |-
                    id(sw1_manual_override_time) = id(time_comp).now().timestamp;
        
        # Switch 2 - Seasonal Daytime Light
        - button:
            id: sw2_button
            width: 400
            height: 70
            x: 40
            y: 190
            checkable: true
            widgets:
              - label:
                  text: "${thermometer_icon} Seasonal Light"
                  text_font: roboto24
                  align: center
            on_click:
              then:
                - switch.toggle: sw2
                - lambda: |-
                    id(sw2_manual_override_time) = id(time_comp).now().timestamp;
        
        # Switch 3 - Weather-Based Light
        - button:
            id: sw3_button
            width: 400
            height: 70
            x: 40
            y: 280
            checkable: true
            widgets:
              - label:
                  id: sw3_button_label
                  text: !lambda |-
                    if (id(sw3_winter_mode)) {
                      return "${rain_icon} Weather Light (Winter)";
                    } else {
                      return "${rain_icon} Weather Light (Summer)";
                    }
                  text_font: roboto24
                  align: center
            on_click:
              then:
                - switch.toggle: sw3
                - lambda: |-
                    id(sw3_manual_override_time) = id(time_comp).now().timestamp;
        
        # Control status
        - obj:
            width: 460
            height: 60
            bg_color: 0x000000
            bg_opa: 50%
            radius: 10
            x: 10
            y: 370
            widgets:
              - label:
                  id: control_status_label
                  text: "Touch buttons to control lights"
                  text_color: 0xFFFFFF
                  text_font: roboto
                  align: center
                  x: 0
                  y: 20
        
        # Navigation buttons
        - button:
            id: home_nav_button
            x: 10
            y: 450
            width: 80
            height: 25
            styles: nav_button_style
            widgets:
              - label:
                  text: "Home"
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lvgl.page.previous:
        
        - button:
            id: settings_nav_button2
            x: 100
            y: 450
            width: 80
            height: 25
            styles: nav_button_style
            widgets:
              - label:
                  text: "Settings"
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lvgl.widget.update:
                    id: controls_page
                    hidden: true
                - lvgl.widget.update:
                    id: settings_page
                    hidden: false
    
    # Settings Page
    - id: settings_page
      hidden: true
      bg_color: 0x000000
      bg_opa: cover
      pad_all: 0
      border_width: 0
      widgets:
        # Background image for settings page
        - image:
            src: background_image
            x: 0
            y: 0
            width: 480
            height: 480
        
        # Title bar
        - obj:
            width: 460
            height: 50
            bg_color: 0x1E3A8A
            bg_opa: 80%
            radius: 10
            x: 10
            y: 10
            widgets:
              - label:
                  text: "SETTINGS"
                  text_font: roboto24
                  align: center
                  text_color: 0xFFFFFF
                  x: 0
                  y: 12
        
        # Location settings container
        - obj:
            width: 460
            height: 120
            bg_color: 0x000000
            bg_opa: 50%
            radius: 10
            x: 10
            y: 80
            widgets:
              - label:
                  text: "Location Settings"
                  text_font: roboto24
                  text_color: 0xFFFFFF
                  x: 10
                  y: 10
              - label:
                  text: "Location:"
                  text_font: roboto
                  x: 10
                  y: 40
                  text_color: 0xCCCCCC
              - label:
                  id: location_name_label
                  text: !lambda 'return id(location_name).state;'
                  text_font: roboto
                  x: 100
                  y: 40
                  text_color: 0xFFFFFF
              - label:
                  id: coordinates_label
                  text: !lambda |-
                    return "Lat: " + std::to_string(id(location_latitude).state).substr(0,6) + 
                           " Lng: " + std::to_string(id(location_longitude).state).substr(0,6);
                  text_font: roboto
                  x: 10
                  y: 65
                  text_color: 0xCCCCCC
        
        # SW3 Mode Toggle
        - button:
            id: sw3_mode_toggle
            width: 460
            height: 60
            x: 10
            y: 220
            checkable: true
            state:
              checked: !lambda 'return id(sw3_winter_mode);'
            widgets:
              - label:
                  id: sw3_mode_label
                  text: !lambda |-
                    if (id(sw3_winter_mode)) {
                      return "SW3 Mode: Winter (Rain-based)";
                    } else {
                      return "SW3 Mode: Summer (Temperature-based)";
                    }
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lambda: |-
                    id(sw3_winter_mode) = !id(sw3_winter_mode);
                - if:
                    condition:
                      lambda: 'return id(sw3_winter_mode);'
                    then:
                      - lvgl.label.update:
                          id: sw3_mode_label
                          text: "SW3 Mode: Winter (Rain-based)"
                      - lvgl.label.update:
                          id: sw3_button_label
                          text: "${rain_icon} Weather Light (Winter)"
                    else:
                      - lvgl.label.update:
                          id: sw3_mode_label
                          text: "SW3 Mode: Summer (Temperature-based)"
                      - lvgl.label.update:
                          id: sw3_button_label
                          text: "${rain_icon} Weather Light (Summer)"

        # System Info container
        - obj:
            width: 460
            height: 100
            bg_color: 0x000000
            bg_opa: 50%
            radius: 10
            x: 10
            y: 300
            widgets:
              - label:
                  text: "System Information"
                  text_font: roboto24
                  text_color: 0xFFFFFF
                  x: 10
                  y: 10
              - label:
                  id: settings_ip_display
                  text: !lambda |-
                    return "IP: " + id(ip_address).state;
                  text_font: roboto
                  x: 10
                  y: 40
                  text_color: 0xCCCCCC
              - label:
                  text: "Version: ${project_version}"
                  text_font: roboto
                  x: 10
                  y: 65
                  text_color: 0xFFFFFF
        
        # Navigation buttons
        - button:
            id: home_button
            x: 10
            y: 450
            width: 80
            height: 25
            styles: nav_button_style
            widgets:
              - label:
                  text: "Home"
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lvgl.widget.update:
                    id: settings_page
                    hidden: true
                - lvgl.widget.update:
                    id: main_page
                    hidden: false
        
        - button:
            id: controls_button
            x: 100
            y: 450
            width: 80
            height: 25
            styles: nav_button_style
            widgets:
              - label:
                  text: "Controls"
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lvgl.widget.update:
                    id: settings_page
                    hidden: true
                - lvgl.widget.update:
                    id: controls_page
                    hidden: false

# OTA popup (moved outside pages to be global)
        - obj:
            id: popup_obj
            hidden: true
            clickable: false
            x: 0
            y: 0
            width: 100%
            height: 100%
            pad_all: 10
            bg_opa: cover
            widgets:
              - label:
                  id: lbl_popup_title
                  x: 2
                  y: 2
                  text: "OTA in progress"
              - label:
                  id: popup_lbl_percentage
                  x: 2
                  y: 30
                  width: 100%
                  text: "0 %"
              - bar:
                  id: popup_pb_percentage
                  x: 2
                  y: 60
                  width: 100%
                  height: 10
                  max_value: 100
                  min_value: 0
                  value: 0

#-------------------------------------------
# Internal outputs
#-------------------------------------------
output:
  # Backlight LED
  - platform: ledc
    pin: GPIO38
    id: GPIO38
    frequency: 100Hz

  # Built in 240v relay
  - id: internal_relay_1
    platform: gpio
    pin: 40

  # Additional relays (3 relay model)
  - id: internal_relay_2
    platform: gpio
    pin: 2
  - id: internal_relay_3
    platform: gpio
    pin: 1

#-------------------------------------------
# Internal lights and switches
#-------------------------------------------
light:
  - platform: monochromatic
    output: GPIO38
    name: Backlight
    id: backlight
    restore_mode: ALWAYS_ON

switch:
  - platform: output
    id: sw1
    name: "Sunrise/Sunset Light"
    output: internal_relay_1
    on_turn_on:
      then:
        - lvgl.widget.update:
            id: sw1_button
            state:
              checked: true
        - lvgl.label.update:
            id: status_label
            text: "Sunrise/Sunset Light ON"
            text_color: green_color
    on_turn_off:
      then:
        - lvgl.widget.update:
            id: sw1_button
            state:
              checked: false
        - lvgl.label.update:
            id: status_label
            text: "Sunrise/Sunset Light OFF"
            text_color: red_color
            
  - platform: output
    id: sw2
    name: "Seasonal Daytime Light"
    output: internal_relay_2
    on_turn_on:
      then:
        - lvgl.widget.update:
            id: sw2_button
            state:
              checked: true
        - lvgl.label.update:
            id: status_label
            text: "Seasonal Daytime Light ON"
            text_color: green_color
    on_turn_off:
      then:
        - lvgl.widget.update:
            id: sw2_button
            state:
              checked: false
        - lvgl.label.update:
            id: status_label
            text: "Seasonal Daytime Light OFF"
            text_color: red_color
            
  - platform: output
    id: sw3
    name: "Weather-Based Light"
    output: internal_relay_3
    on_turn_on:
      then:
        - lvgl.widget.update:
            id: sw3_button
            state:
              checked: true
        - lvgl.label.update:
            id: status_label
            text: !lambda |-
              if (id(sw3_winter_mode)) {
                return "Weather-Based Light ON (Winter)";
              } else {
                return "Weather-Based Light ON (Summer)";
              }
            text_color: green_color
    on_turn_off:
      then:
        - lvgl.widget.update:
            id: sw3_button
            state:
              checked: false
        - lvgl.label.update:
            id: status_label
            text: !lambda |-
              if (id(sw3_winter_mode)) {
                return "Weather-Based Light OFF (Winter)";
              } else {
                return "Weather-Based Light OFF (Summer)";
              }
            text_color: red_color

#-------------------------------------------
# Scripts for automation logic
#-------------------------------------------
script:
  - id: goto_settings
    then:
      - lvgl.widget.update:
          id: settings_page
          hidden: false
      - delay: 1000ms
      - lvgl.widget.update:
          id: main_page
          hidden: true
      - lvgl.widget.redraw:

  - id: notify_web_portal
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - lvgl.label.update:
                id: status_label
                text: "Web portal active at http://${ip_address.state}"
                text_color: ha_blue
            - logger.log: 
                format: "Web portal active at http://%s"
                args: ['id(ip_address).state.c_str()']
          else:
            - lvgl.label.update:
                id: status_label
                text: "No internet. Connect to AP: PhiJo Smart Products"
                text_color: orange_color
            - logger.log: "No internet. Connect to AP: PhiJo Smart Products"
      - lvgl.label.update:
          id: ip_address_label
          text: !lambda |-
            if (id(ip_address).has_state()) {
              return std::string("WiFi: ") + id(ip_address).state;
            } else {
              return "wifi Not connected";
            }

  - id: time_update
    then:
      - script.execute: notify_web_portal
      - logger.log:
          format: "TIME DEBUG: HA connected: %s, Time valid: %s"
          args: [
            'id(api_server).is_connected() ? "YES" : "NO"',
            'id(time_comp).now().is_valid() ? "YES" : "NO"'
          ]
      - logger.log:
          format: "TIME DEBUG: Current time: %04d-%02d-%02d %02d:%02d:%02d"
          args: [
            'id(time_comp).now().year',
            'id(time_comp).now().month',
            'id(time_comp).now().day_of_month',
            'id(time_comp).now().hour',
            'id(time_comp).now().minute',
            'id(time_comp).now().second'
          ]
      - lvgl.label.update:
          id: digital_clock
          text: !lambda |-
            auto now = id(time_comp).now();
            if (!now.is_valid()) {
              // Try SNTP time if HA time is invalid
              now = id(sntp_time).now();
            }
            static char time_buf[6];
            sprintf(time_buf, "%02d:%02d", now.hour, now.minute);
            return time_buf;
      - lvgl.label.update:
          id: full_date_label
          text: !lambda |-
            auto now = id(time_comp).now();
            if (!now.is_valid()) {
              // Try SNTP time if HA time is invalid
              now = id(sntp_time).now();
            }
            static const char * const day_names[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
            static const char * const mon_names[] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
            static char date_buf[32];
            sprintf(date_buf, "%s, %s %d, %d", day_names[now.day_of_week - 1], mon_names[now.month-1], now.day_of_month, now.year);
            return date_buf;
      - lvgl.label.update:
          id: weather_forecast
          text: "Weather forecast: Sunny with chance of clouds"            
  - id: check_light_schedules
    then:
      - lambda: |-
          auto now = id(time_comp).now();
          
          // Check for manual override timeouts (24 hours = 86400 seconds)
          if (id(sw1_manual_override_time) > 0 && 
              now.timestamp - id(sw1_manual_override_time) > 86400) {
            id(sw1_manual_override_time) = 0;
          }
          
          if (id(sw2_manual_override_time) > 0 && 
              now.timestamp - id(sw2_manual_override_time) > 86400) {
            id(sw2_manual_override_time) = 0;
          }
          
          if (id(sw3_manual_override_time) > 0 && 
              now.timestamp - id(sw3_manual_override_time) > 86400) {
            id(sw3_manual_override_time) = 0;
          }
          
          // Only run automations if not in manual override mode
          
          // ---- SWITCH 1: SUNRISE/SUNSET CONTROL ----
          if (id(sw1_manual_override_time) == 0) {
            // Check for sunrise events
            auto sunrise_opt = id(sun_comp).sunrise(0.0);  // 0.0 degrees elevation
            if (sunrise_opt.has_value()) {
              auto sunrise = sunrise_opt.value();
              
              // Check if it's 30 minutes before sunrise (between 30 and 29 minutes before)
              if (sunrise.timestamp - now.timestamp <= 1800 && 
                  sunrise.timestamp - now.timestamp > 1740 && 
                  !id(sw1_before_sunrise)) {
                // Turn on light 30 minutes before sunrise
                id(sw1).turn_on();
                id(sw1_before_sunrise) = true;
                id(lvgl_comp).loop();
              }
              
              // Check if it's sunrise time (within 1 minute)
              if (abs(sunrise.timestamp - now.timestamp) < 60 && 
                  id(sw1_before_sunrise)) {
                // Turn off light at sunrise
                id(sw1).turn_off();
                id(sw1_before_sunrise) = false;
                id(lvgl_comp).loop();
              }
            }
            
            // Check for sunset events
            auto sunset_opt = id(sun_comp).sunset(0.0);  // 0.0 degrees elevation
            if (sunset_opt.has_value()) {
              auto sunset = sunset_opt.value();
              
              // Check if it's sunset time (within 1 minute)
              if (abs(sunset.timestamp - now.timestamp) < 60) {
                // Turn on light at sunset and set timer for 2 hours
                id(sw1).turn_on();
                id(sw1_off_time) = now.timestamp + 7200; // 2 hours
                id(lvgl_comp).loop();
              }
            }
            
            // Check if it's time to turn off SW1 after sunset
            if (id(sw1).state && !id(sw1_before_sunrise) && 
                now.timestamp >= id(sw1_off_time) && id(sw1_off_time) > 0) {
              id(sw1).turn_off();
              id(sw1_off_time) = 0;
              id(lvgl_comp).loop();
            }
          }
          
          // ---- SWITCH 2: SEASONAL DAYTIME CONTROL ----
          if (id(sw2_manual_override_time) == 0) {
            // Run the seasonal timer at noon
            if (now.hour == 12 && now.minute == 0) {
              int month = now.month;
              // Summer: Mar-Sep (6 hours), Winter: Oct-Feb (1 hour)
              int hours = (month >= 3 && month <= 9) ? 6 : 1;
              
              // Turn on SW2 and set timer
              id(sw2).turn_on();
              id(sw2_off_time) = now.timestamp + hours * 3600;
              id(lvgl_comp).loop();
            }
            
            // Check if it's time to turn off SW2
            if (id(sw2).state && now.timestamp >= id(sw2_off_time) && id(sw2_off_time) > 0) {
              id(sw2).turn_off();
              id(sw2_off_time) = 0;
              id(lvgl_comp).loop();
            }
          }
          
          // ---- SWITCH 3: WEATHER-BASED CONTROL ----
          // For now, we'll just use a simple timer for SW3 without weather data
          if (id(sw3_manual_override_time) == 0) {
            // Turn on SW3 at 3 PM if it's not already on
            if (now.hour == 15 && now.minute == 0 && !id(sw3).state) {
              id(sw3).turn_on();
              id(sw3_off_time) = now.timestamp + 3600; // 1 hour
              id(lvgl_comp).loop();
            }
            
            // Check if it's time to turn off SW3
            if (id(sw3).state && now.timestamp >= id(sw3_off_time) && id(sw3_off_time) > 0) {
              id(sw3).turn_off();
              id(sw3_off_time) = 0;
              id(lvgl_comp).loop();
            }
          }

#-------------------------------------------
# Graphics and Fonts
#-------------------------------------------
font:
  - file: "gfonts://Roboto"
    id: roboto24
    size: 24
    bpp: 4
    
  - file: "gfonts://Roboto"
    id: roboto
    size: 18
    bpp: 4

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icons24
    size: 24
    bpp: 4
    glyphs: [
        "\U000F0335", # mdi-lightbulb
        "\U000F0769", # mdi-ceiling-light
        "\U000F06B5", # mdi-lamp
        "\U000F08DD", # mdi-floor-lamp
        "\U000F12BA", # mdi-string-lights
        "\U000F0493", # mdi-settings
        "\U000F02DC", # mdi-home
        "\U000F0599", # mdi-weather-sunny
        "\U000F0F64", # mdi-weather-night
        "\U000F0596", # mdi-weather-pouring
        "\U000F050F", # mdi-thermometer
      ]

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: light40
    size: 40
    bpp: 4
    glyphs: [
        "\U000F0335", # mdi-lightbulb
        "\U000F0769", # mdi-ceiling-light
        "\U000F06B5", # mdi-lamp
        "\U000F08DD", # mdi-floor-lamp
        "\U000F12BA", # mdi-string-lights
      ]

  - file: "gfonts://Roboto"
    id: roboto_large
    size: 72
    bpp: 4

#-------------------------------------------
# Touchscreen gt911 i2c
#-------------------------------------------
i2c:
  - id: bus_a
    sda: GPIO19
    scl: GPIO45

touchscreen:
  platform: gt911
  transform:
    mirror_x: false
    mirror_y: false
  id: my_touchscreen
  display: my_display

  on_touch:
    - lambda: |-
        ESP_LOGD("touch", "Touch at (%d, %d)", touch.x, touch.y);
  on_release:
    then:
      - if:
          condition: lvgl.is_paused
          then:
            - light.turn_on: backlight
            - lvgl.resume:
            - lvgl.widget.redraw:

#-------------------------------------------
# Display st7701s spi
#-------------------------------------------
spi:
  - id: lcd_spi
    clk_pin: GPIO48
    mosi_pin: GPIO47

display:
  - platform: st7701s
    id: my_display
    update_interval: never
    auto_clear_enabled: False
    spi_mode: MODE3
    color_order: RGB
    invert_colors: False
    dimensions:
      width: 480
      height: 480
    cs_pin: 39
    de_pin: 18
    hsync_pin: 16
    vsync_pin: 17
    pclk_pin: 21
    pclk_frequency: 12MHz
    pclk_inverted: False
    hsync_pulse_width: 8
    hsync_front_porch: 10
    hsync_back_porch: 20
    vsync_pulse_width: 8
    vsync_front_porch: 10
    vsync_back_porch: 10
    init_sequence:
      - 1
      # Custom sequences are an array, first byte is command, the rest are data.
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x10] # CMD2_BKSEL_BK0
      - [0xCD, 0x00] # disable MDT flag
    data_pins:
      red:
        - 11 #r1
        - 12 #r2
        - 13 #r3
        - 14 #r4
        - 0 #r5
      green:
        - 8 #g0
        - 20 #g1
        - 3 #g2
        - 46 #g3
        - 9 #g4
        - 10 #g5
      blue:
        - 4 #b1
        - 5 #b2
        - 6 #b3
        - 7 #b4
        - 15 #b5
image:
  - file: "images/background.jpg"
    id: background_image
    resize: 480x480
    type: RGB565
interval:
  - interval: 30s
    then:
      - lambda: |-
          // Check if time is still valid and force resync if needed
          auto now = id(time_comp).now();
          if (!now.is_valid() || now.year < 2020) {
            ESP_LOGW("time", "Time appears invalid, requesting resync");
            id(time_comp).call_setup();
          }
      - script.execute: time_update
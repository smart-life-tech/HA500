# known value 'MIDDLE_LEFT', valid options are 'TOP_LEFT', 'TOP_MID', 'TOP_RIGHT', 'LEFT_MID', 'CENTER', 'RIGHT_MID', 'BOTTOM_LEFT', 'BOTTOM_MID', 'BOTTOM_RIGHT'.
substitutions:
  name: "phijo-smart-device"
  friendly_name: "Phijo Smart"
  device_description: " Smart  Controller"
  project_name: "Guition.ESP32_S3_4848S040"
  project_version: "1.0.2"

  lightbulb: "\U000F0335"
  ceiling_light: "\U000F0769"
  lamp: "\U000F06B5"
  floor_lamp: "\U000F08DD"
  string_lights: "\U000F12BA"
  settings_icon: "\U000F0493"
  home_icon: "\U000F02DC"
  sun_icon: "\U000F0599"
  moon_icon: "\U000F0F64"
  rain_icon: "\U000F0596"
  thermometer_icon: "\U000F050F"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  project:
    name: "${project_name}"
    version: "${project_version}"
  platformio_options:
    board_build.flash_mode: dio
    build_unflags: "-f"
    build_flags: "-shared"

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      COMPILER_OPTIMIZATION_SIZE: y
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: octal
  speed: 80MHz

# Enable logging
logger:
  level: DEBUG
  baud_rate: 115200

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key
  id: api_server
  on_client_connected:
    then:
      - logger.log: "API DEBUG: Home Assistant connected"
      - delay: 2s
      - script.execute: time_display_update
  on_client_disconnected:
    then:
      - logger.log: "API DEBUG: Home Assistant disconnected"
      - script.execute: time_display_update
ota:
  - platform: esphome
    id: my_ota
    password: !secret ota_password
    on_begin:
      then:
        - logger.log: "OTA start"
        - light.turn_on: backlight
        - lvgl.resume:
        #- lvgl.widget.show: popup_obj
        - lvgl.resume:
        - lvgl.widget.redraw:
    # on_progress:
    #   then:
    #     - lvgl.bar.update:
    #         id: popup_pb_percentage
    #         value: !lambda "return (int)x;"
    #     - lvgl.label.update:
    #         id: popup_lbl_percentage
    #         text:
    #           format: "OTA progress %0.1f%%"
    #           args: ["x"]
    #     - lambda: "id(lvgl_comp).loop();"
sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_rssi
    update_interval: 60s

  - platform: template
    name: "Daily Evaporation"
    id: daily_evaporation_sensor
    unit_of_measurement: "L"
    accuracy_decimals: 1
    lambda: "return id(calculated_evaporation_liters);"
    update_interval: 300s

  - platform: template
    name: "Irrigation Needed"
    id: irrigation_needed_sensor
    unit_of_measurement: "L"
    accuracy_decimals: 1
    lambda: "return id(irrigation_needed_liters);"
    update_interval: 300s

  - platform: template
    name: "Daily Rainfall"
    id: daily_rainfall_sensor
    unit_of_measurement: "mm"
    accuracy_decimals: 1
    lambda: "return id(daily_rainfall_mm);"
    update_interval: 300s

  - platform: template
    name: "Field Area"
    id: field_area_sensor
    unit_of_measurement: "m²"
    accuracy_decimals: 0
    lambda: "return id(field_area_m2);"
    update_interval: never

  - platform: template
    name: "Valve Flow Rate"
    id: valve_flow_rate_sensor
    unit_of_measurement: "L/min"
    accuracy_decimals: 1
    lambda: "return id(valve_liters_per_minute);"
    update_interval: never

  - platform: template
    name: "OWM Temperature"
    id: owm_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  - platform: template
    name: "OWM Humidity"
    id: owm_humidity
    unit_of_measurement: "%"
    accuracy_decimals: 0

  - platform: template
    name: "OWM Pressure"
    id: owm_pressure
    unit_of_measurement: "hPa"
    accuracy_decimals: 0

  - platform: template
    name: "OWM Wind Speed"
    id: owm_wind_speed
    unit_of_measurement: "m/s"
    accuracy_decimals: 1

  - platform: template
    name: "OWM Feels Like"
    id: owm_feels_like
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  # ADDing NEW SENSORS
  - platform: template
    name: "OWM Visibility"
    id: owm_visibility
    unit_of_measurement: "km"
    accuracy_decimals: 1

  - platform: template
    name: "OWM Cloud Coverage"
    id: owm_clouds
    unit_of_measurement: "%"
    accuracy_decimals: 0

  - platform: template
    name: "OWM Wind Gust"
    id: owm_wind_gust
    unit_of_measurement: "m/s"
    accuracy_decimals: 1

  - platform: template
    name: "OWM Wind Direction"
    id: owm_wind_direction
    unit_of_measurement: "°"
    accuracy_decimals: 0

http_request:
  id: http_requests
  useragent: "ESPHome/1.0"
  timeout: 30s # Increase timeout
  verify_ssl: false
  follow_redirects: true
  buffer_size_rx: 1024 # Add buffer size

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: !secret wifi_ssid2
      password: !secret wifi_password2

  # Added parameters for better connection reliability
  power_save_mode: NONE
  # fast_connect: true
  reboot_timeout: 0s

  # Existing fallback AP configuration
  ap:
    ssid: "PhiJo Smart Products"
    password: !secret wifi_fallback_password

  # Existing event handlers
  on_connect:
    then:
      - logger.log: "WiFi connected, starting web server"
      #- script.execute: update_qr_display  # Update QR code
      - delay: 1s
      #- script.execute: notify_web_portal
  on_disconnect:
    then:
      - logger.log: "WiFi disconnected, attempting to reconnect"
      - script.execute: notify_web_portal
      #- script.execute: update_qr_display  # Update QR code
time:
  - platform: homeassistant
    id: time_comp
    timezone: "Europe/Lisbon"
    on_time_sync:
      then:
        - logger.log: "TIME DEBUG: Time synchronized with Home Assistant"
        - script.execute: time_display_update # Changed from time_update
    on_time:
      # Update clock display every minute (display only)
      - minutes: "*"
        seconds: 0
        then:
          - script.execute: time_display_update # Changed from time_update

      # Run automation checks less frequently (every 5 minutes)
      - minutes: "/5" # Changed from /1 to /5
        seconds: 0
        then:
          - script.execute: check_light_schedules

  # Add SNTP as fallback when Home Assistant is unavailable
  - platform: sntp
    id: sntp_time
    timezone: "Europe/Lisbon"
    servers:
      - "pool.ntp.org"
      - "time.nist.gov"
      - "time.google.com"
    on_time_sync:
      then:
        - logger.log: "TIME DEBUG: Time synchronized with SNTP server"
        - if:
            condition:
              not:
                api.connected:
            then:
              - script.execute: time_display_update

web_server:
  port: 80
  version: 2
  include_internal: true
  local: true

captive_portal:

# For the sun component, we need to use fixed values initially
sun:
  latitude: 37.1 # Default value matching the initial_value in location_latitude
  longitude: -8.0 # Default value matching the initial_value in location_longitude
  id: sun_comp

# Add this to update the sun component when location changes
number:
  - platform: template
    id: field_area_input
    name: "Field Area (m²)"
    min_value: 1
    max_value: 1000
    step: 1
    restore_value: yes
    initial_value: 48
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(field_area_m2) = x;
            ESP_LOGI("irrigation", "Field area updated to %.0f m²", x);
        - script.execute: calculate_irrigation_needs

  - platform: template
    id: valve_flow_rate_input
    name: "Valve Flow Rate (L/min)"
    min_value: 1
    max_value: 100
    step: 0.5
    restore_value: yes
    initial_value: 20
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(valve_liters_per_minute) = x;
            ESP_LOGI("irrigation", "Valve flow rate updated to %.1f L/min", x);

  - platform: template
    id: location_latitude
    name: "Location Latitude"
    min_value: -90
    max_value: 90
    step: 0.01
    restore_value: true
    initial_value: 37.1 # Default to a central location
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(sun_comp).set_latitude(id(location_latitude).state);

  - platform: template
    id: location_longitude
    name: "Location Longitude"
    min_value: -180
    max_value: 180
    step: 0.01
    restore_value: true
    initial_value: -8.0 # Default to a central location
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(sun_comp).set_longitude(id(location_longitude).state);
  # NEW: Light automation number inputs
  - platform: template
    id: sunset_hours_input
    name: "Sunset Duration Hours"
    min_value: 1
    max_value: 12
    step: 1
    restore_value: true
    initial_value: 2
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(sunset_duration_hours) = (int)x;
        - lvgl.label.update:
            id: sunset_hours_display
            text: !lambda |-
              static char text[20];
              snprintf(text, sizeof(text), "%d hours", id(sunset_duration_hours));
              return text;

  - platform: template
    id: sunrise_hours_input
    name: "Sunrise Duration Hours"
    min_value: 1
    max_value: 6
    step: 1
    restore_value: true
    initial_value: 1
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(sunrise_duration_hours) = (int)x;
        - lvgl.label.update:
            id: sunrise_hours_display
            text: !lambda |-
              static char text[20];
              snprintf(text, sizeof(text), "%d hours", id(sunrise_duration_hours));
              return text;

  - platform: template
    id: manual_hours_input
    name: "Manual Duration Hours"
    min_value: 1
    max_value: 24
    step: 1
    restore_value: true
    initial_value: 4
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(manual_duration_hours) = (int)x;
        - lvgl.label.update:
            id: manual_hours_display
            text: !lambda |-
              static char text[20];
              snprintf(text, sizeof(text), "%d hours", id(manual_duration_hours));
              return text;

  - platform: template
    id: until_time_hour_input
    name: "Until Time Hour"
    min_value: 0
    max_value: 23
    step: 1
    restore_value: true
    initial_value: 23
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(sunset_until_time_hour) = (int)x;
        - lvgl.label.update:
            id: until_time_display
            text: !lambda |-
              static char text[20];
              snprintf(text, sizeof(text), "%02d:%02d", id(sunset_until_time_hour), id(sunset_until_time_minute));
              return text;

  - platform: template
    id: until_time_minute_input
    name: "Until Time Minute"
    min_value: 0
    max_value: 59
    step: 15
    restore_value: true
    initial_value: 0
    optimistic: true
    on_value:
      then:
        - lambda: |-
            id(sunset_until_time_minute) = (int)x;
        - lvgl.label.update:
            id: until_time_display
            text: !lambda |-
              static char text[20];
              snprintf(text, sizeof(text), "%02d:%02d", id(sunset_until_time_hour), id(sunset_until_time_minute));
              return text;
# binary sensors for irrigation status
binary_sensor:
  - platform: template
    name: "Irrigation Required"
    id: irrigation_required
    lambda: "return id(irrigation_needed_liters) > 5.0;"

  - platform: template
    name: "Training Mode Active"
    id: training_mode_active
    lambda: "return id(valve_training_mode);"

text_sensor:
  - platform: wifi_info
    ssid:
      name: "Connected SSID"
      id: wifi_ssid
      entity_category: diagnostic
    bssid:
      name: "Connected BSSID"
      id: wifi_bssid
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      id: wifi_mac
      entity_category: diagnostic
    scan_results:
      name: "WiFi Scan Results"
      id: wifi_scan
      entity_category: diagnostic

  - platform: template
    name: "WiFi Gateway"
    id: wifi_gateway
    lambda: |-
      //auto gateway = wifi::global_wifi_component->wifi_sta_ip_config().gateway;
      return {"192.168.0.1"}; // Replace with actual gateway retrieval logic
    update_interval: 60s

  - platform: template
    name: "WiFi Subnet"
    id: wifi_subnet
    lambda: |-
      //auto subnet = wifi::global_wifi_component->wifi_sta_ip_config().subnet;
      return {"255.255.255.0"}; // Replace with actual subnet retrieval logic
    update_interval: 60s

  - platform: template
    name: "WiFi DNS"
    id: wifi_dns
    lambda: |-
      //auto dns1 = wifi::global_wifi_component->wifi_sta_ip_config().dns1;
      return {"192.168.0.1"}; // Replace with actual DNS retrieval logic";
    update_interval: 60s

  - platform: template
    id: weather_condition
    name: "Weather Condition"

  - platform: template
    id: weather_description
    name: "Weather Description"

  - platform: wifi_info
    ip_address:
      name: "IP Address"
      id: ip_address
      entity_category: diagnostic
      on_value:
        then:
          - logger.log:
              format: "Raw IP string: '%s' (length: %d)"
              args: ["x.c_str()", "x.length()"]
          - lambda: |-
              ESP_LOGI("ip_debug", "Hex dump of IP string:");
              for (size_t i = 0; i < x.length() && i < 50; i++) {
                ESP_LOGI("ip_debug", "  [%02d]: 0x%02X '%c'", i, (unsigned char)x[i], 
                         std::isprint(x[i]) ? x[i] : '?');
              }
          - delay: 1s
          #- script.execute: update_qr_display

    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      entity_category: diagnostic

  - platform: template
    id: location_name
    name: "Weather Location"
    lambda: |-
      return {id(location_name_str)};
  - platform: template
    name: "Irrigation Status"
    id: irrigation_status
    lambda: |-
      if (id(valve_training_mode)) {
        return {"Training Mode Active"};
      } else if (id(sw3).state) {
        return {"Irrigating"};
      } else if (id(irrigation_needed_liters) > 10) {
        return {"Irrigation Needed"};
      } else if (id(daily_rainfall_mm) > 5) {
        return {"Recently Watered by Rain"};
      } else {
        return {"Optimal"};
      }
    update_interval: 60s

  - platform: template
    name: "Next Irrigation Time"
    id: next_irrigation_time
    lambda: |-
      auto now = id(time_comp).now();
      if (!now.is_valid()) return {"Time not available"};

      // Calculate next appropriate irrigation time
      int current_hour = now.hour;
      std::string next_time = "";

      if (id(irrigation_needed_liters) > 10) {
        if (current_hour < 5) {
          next_time = "05:00 (Morning)";
        } else if (current_hour < 18) {
          next_time = "18:00 (Evening)";
        } else if (current_hour < 20) {
          next_time = "Now (Evening window)";
        } else {
          next_time = "Tomorrow 05:00";
        }
      } else {
        next_time = "Not needed";
      }

      return {next_time};
    update_interval: 300s
color:
  # Create a Home Assistant blue color
  - id: ha_blue
    hex: 51c0f2
  - id: green_color
    red: 0%
    green: 60%
    blue: 0%
  - id: red_color
    red: 80%
    green: 0%
    blue: 0%
  - id: orange_color
    red: 100%
    green: 60%
    blue: 0%
  - id: blue_color
    red: 0%
    green: 40%
    blue: 100%
  - id: black_color
    red: 0%
    green: 0%
    blue: 0%
  - id: white_color
    red: 100%
    green: 100%
    blue: 100%
  - id: yellow_color
    red: 100%
    green: 100%
    blue: 0%

# Global variables for timer tracking and settings
globals:
  # Irrigation system globals
  - id: field_area_m2
    type: float
    restore_value: yes
    initial_value: "48.0" # Default 48 m² field area

  - id: wifi_popup_visible
    type: bool
    restore_value: no
    initial_value: "false"

  - id: valve_training_mode
    type: bool
    restore_value: yes
    initial_value: "false"

  - id: valve_training_start_time
    type: int
    restore_value: no
    initial_value: "0"

  - id: valve_liters_per_minute
    type: float
    restore_value: yes
    initial_value: "20.0" # Default 20 L/min flow rate

  - id: daily_rainfall_mm
    type: float
    restore_value: no
    initial_value: "0.0"

  - id: calculated_evaporation_liters
    type: float
    restore_value: no
    initial_value: "0.0"

  - id: irrigation_needed_liters
    type: float
    restore_value: no
    initial_value: "0.0"

  - id: qr_text_value
    type: std::string
    restore_value: no
    initial_value: '"http://192.168.4.1/"'

  - id: location_name_str
    type: std::string
    restore_value: yes
    initial_value: '"Sao Bartolomeu de Messines, Portugal"'
  # Timer tracking
  - id: sw1_off_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw2_off_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw3_off_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw1_before_sunrise
    type: bool
    restore_value: yes
    initial_value: "false"

  # Manual override tracking
  - id: sw1_manual_override_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw2_manual_override_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw3_manual_override_time
    type: int
    restore_value: yes
    initial_value: "0"

  # SW3 mode (winter/summer)
  - id: sw3_winter_mode
    type: bool
    restore_value: yes
    initial_value: "false" # Default to summer mode

  # Current page tracking
  - id: current_page
    type: int
    restore_value: no
    initial_value: "0" # 0 = main page, 1 = settings page

  # Add this missing global variable for touch tracking
  - id: touch_start_y
    type: int
    restore_value: no
    initial_value: "0"
  - id: touch_end_y
    type: int
    restore_value: no
    initial_value: "0"
  - id: touch_active
    type: bool
    restore_value: no
    initial_value: "false"
  # NEW: Light automation settings
  - id: sunset_duration_hours
    type: int
    restore_value: yes
    initial_value: "2" # Default 2 hours after sunset

  - id: sunrise_duration_hours
    type: int
    restore_value: yes
    initial_value: "1" # Default 1 hour before sunrise

  - id: manual_duration_hours
    type: int
    restore_value: yes
    initial_value: "4" # Default 4 hours for manual on

  - id: sunset_until_time_hour
    type: int
    restore_value: yes
    initial_value: "23" # Default until 23:00

  - id: sunset_until_time_minute
    type: int
    restore_value: yes
    initial_value: "0" # Default until 23:00

  - id: sunrise_from_time_hour
    type: int
    restore_value: yes
    initial_value: "6" # Default from 06:00

  - id: sunrise_from_time_minute
    type: int
    restore_value: yes
    initial_value: "0" # Default from 06:00

  - id: automation_mode
    type: int
    restore_value: yes
    initial_value: "0" # 0=duration, 1=until_time, 2=between_times, 3=manual

button:
  - platform: template
    name: "Start Valve Training"
    id: start_training_button
    on_press:
      then:
        - script.execute: start_valve_training

  - platform: template
    name: "Calculate Irrigation Needs"
    id: calc_irrigation_button
    on_press:
      then:
        - script.execute: calculate_irrigation_needs

  - platform: template
    name: "Reset Daily Rainfall"
    id: reset_rainfall_button
    on_press:
      then:
        - lambda: |-
            id(daily_rainfall_mm) = 0.0f;
            ESP_LOGI("irrigation", "Daily rainfall reset to 0mm");

# Add select for irrigation mode
select:
  - platform: template
    name: "Irrigation Mode"
    id: irrigation_mode_select
    optimistic: true # Add this line
    options:
      - "Summer (High Evaporation)"
      - "Winter (Low Evaporation)"
    initial_option: "Summer (High Evaporation)"
    restore_value: true
    on_value:
      then:
        - lambda: |-
            if (x == "Winter (Low Evaporation)") {
              id(sw3_winter_mode) = true;
            } else {
              id(sw3_winter_mode) = false;
            }
            ESP_LOGI("irrigation", "Mode changed to: %s", x.c_str());
        - script.execute: calculate_irrigation_needs

#-------------------------------------------
# LVGL Interface
#-------------------------------------------
lvgl:
  id: lvgl_comp
  displays:
    - my_display
  touchscreens:
    - touchscreen_id: my_touchscreen

  bg_color: 0x000000

  on_idle:
    - timeout: 30s
      then:
        - logger.log: idle 30s timeout
        - light.turn_off:
            id: backlight
            transition_length: 5s
        - lvgl.pause:
            show_snow: true

  style_definitions:
    - id: style_line
      line_color: 0x0000FF
      line_width: 8
      line_rounded: true
    - id: date_style
      text_font: roboto24
      align: center
      text_color: 0x333333
      bg_opa: cover
      radius: 4
      #pad_all: 2
    - id: switch_style_on
      bg_color: 0x00AA00
      text_color: 0xFFFFFF
    - id: switch_style_off
      bg_color: 0x555555
      text_color: 0xCCCCCC
    - id: nav_button_style
      bg_color: 0x444444
      text_color: 0xFFFFFF
      radius: 15
      pad_all: 5
    - id: title_style
      bg_color: 0x1E3A8A
      text_color: 0xFFFFFF
      text_font: roboto24
      radius: 10
      pad_all: 8

  theme:
    button:
      text_font: roboto24
      scroll_on_focus: false
      radius: 25
      width: 150
      height: 60
      pad_left: 10px
      pad_top: 10px
      pad_bottom: 10px
      pad_right: 10px
      shadow_width: 0
      border_width: 0
      bg_color: 0x313131
      text_color: 0xB6B6B6
      checked:
        bg_color: 0xCC5E14
        text_color: 0xB6B6B6

  page_wrap: true
  pages:
    # Main Page - Dashboard with Clock, Date, Weather
    - id: main_page
      skip: false
      bg_color: 0x000000
      bg_opa: cover
      #pad_all: 0
      border_width: 0
      scrollable: false
      widgets:
        # Background image - fixed position
        - image:
            src: background_image
            x: 0
            y: 0
            width: 480
            height: 480
            align: TOP_LEFT
          # - image:
          #     src: wifi_icon
          #     x: 3
          #     y: 10
          #     width: 30
          #     height: 30
          #     bg_opa: 0%  # Transparent background
          #     border_width: 0
          # on_click:
          #     then:
          #       - script.execute: toggle_wifi_popup
        - obj:
            widgets:
              - image:
                  src: wifi_icon
                  x: 2
                  y: 10
                  width: 30
                  height: 30
                  bg_opa: 0% # Transparent background
                  border_width: 0
            on_click:
              then:
                - script.execute: toggle_wifi_popup
        # Title Bar
        - obj:
            width: 460
            scrollable: false # Add this
            height: 60
            bg_color: 0x1E3A8A
            bg_opa: 0%
            radius: 10
            x: 10
            y: 10
            border_width: 0
            widgets:
              - label:
                  text: "PHIJO SMART"
                  text_font: roboto24
                  align: center
                  text_color: 0xFFFFFF
                  x: 10
                  y: 2
                  border_width: 0
        - obj:
            width: 460
            height: 140
            bg_color: 0x1E3A8A
            bg_opa: 0%
            radius: 10
            x: 10
            y: 30
            border_width: 0
            scrollable: false # Add this
            widgets:
              # Clock - positioned below title (fixed positioning)
              - label:
                  id: digital_clock
                  text: !lambda |-
                    auto now = id(time_comp).now();
                    if (!now.is_valid()) {
                      now = id(sntp_time).now();
                    }
                    static char time_buf[6];
                    sprintf(time_buf, "%02d:%02d", now.hour, now.minute);
                    return time_buf;
                  text_font: roboto_large
                  align: center
                  text_color: 0xFFFFFF
                  x: 145
                  y: 0
                  border_width: 0
                  width: 480

              # Date - positioned below clock (fixed positioning)

              - label:
                  id: full_date_label
                  text: "Date will appear here"
                  text_font: roboto24
                  align: center
                  text_color: 0xFFFFFF
                  x: 120
                  y: 45
                  border_width: 0
                  width: 480
                  scrollable: false # Add this
        - obj:
            id: wifi_popup_obj
            hidden: true
            x: 50
            y: 80
            width: 380
            height: 320
            bg_color: 0x000000
            bg_opa: 90%
            radius: 15
            border_width: 2
            border_color: 0x1E3A8A
            widgets:
              # Popup title
              - label:
                  text: "WiFi Status Information"
                  text_font: roboto24
                  text_color: 0xFFFFFF
                  align: center
                  x: 0
                  y: 10
                  width: 380

              # Close button
              - button:
                  x: 340
                  y: 10
                  width: 30
                  height: 30
                  widgets:
                    - label:
                        text: "×"
                        text_font: roboto24
                        align: center
                        text_color: 0xFFFFFF
                  on_click:
                    then:
                      - script.execute: toggle_wifi_popup

              # WiFi Status
              - label:
                  text: "Status:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 50
              - label:
                  id: wifi_status_text
                  text: "Checking..."
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 80
                  y: 50

              # SSID
              - label:
                  text: "SSID:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 75
              - label:
                  id: wifi_ssid_text
                  text: "N/A"
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 80
                  y: 75

              # BSSID
              - label:
                  text: "BSSID:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 100
              - label:
                  id: wifi_bssid_text
                  text: "N/A"
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 80
                  y: 100
                  width: 280

              # RSSI
              - label:
                  text: "Signal:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 125
              - label:
                  id: wifi_rssi_text
                  text: "N/A"
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 80
                  y: 125

              # IP Address
              - label:
                  text: "IP:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 150
              - label:
                  id: wifi_ip_text
                  text: "N/A"
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 80
                  y: 150

              # Gateway
              - label:
                  text: "Gateway:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 175
              - label:
                  id: wifi_gateway_text
                  text: "N/A"
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 80
                  y: 175

              # Subnet
              - label:
                  text: "Subnet:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 200
              - label:
                  id: wifi_subnet_text
                  text: "N/A"
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 80
                  y: 200

              # DNS
              - label:
                  text: "DNS:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 225
              - label:
                  id: wifi_dns_text
                  text: "N/A"
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 80
                  y: 225

              # MAC Address
              - label:
                  text: "MAC:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 250
              - label:
                  id: wifi_mac_text
                  text: "N/A"
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 80
                  y: 250
                  width: 280

              # Refresh button
              - button:
                  x: 10
                  y: 280
                  width: 100
                  height: 30
                  widgets:
                    - label:
                        text: "Refresh"
                        text_font: roboto
                        align: center
                  on_click:
                    then:
                      - script.execute: toggle_wifi_popup
                      - delay: 100ms
                      - script.execute: toggle_wifi_popup

        # Weather section - semi-transparent overlay
        - obj:
            width: 460
            height: 250 # Increased height to fit more info
            bg_color: 0x000000
            bg_opa: 0%
            radius: 10
            #pad_all: 10
            x: 10
            y: 150 # Adjusted position
            border_width: 0
            scrollable: false
            widgets:
              # Main weather condition
              # Row 1: Main weather condition
              - image:
                  src: cloud_icon
                  x: 0
                  y: 70
              - label:
                  id: weather_label
                  text: !lambda |-
                    if (id(weather_condition).has_state()) {
                      return id(weather_condition).state.c_str();
                    }
                    return "Loading...";
                  text_font: roboto24
                  text_color: yellow_color
                  #align: TOP_LEFT
                  x: 40
                  y: 70
                  border_width: 0

              # Row 2: Temperature with icon
              - image:
                  src: thermometer_icon
                  x: 200
                  y: 70
              - label:
                  id: temperature_label
                  text: !lambda |-
                    if (id(owm_temperature).has_state()) {
                      static char temp_text[60];
                      if (id(owm_feels_like).has_state()) {
                        snprintf(temp_text, sizeof(temp_text), "%.1f°C feels %.1f°C", 
                                id(owm_temperature).state, id(owm_feels_like).state);
                      } else {
                        snprintf(temp_text, sizeof(temp_text), "%.1f°C", id(owm_temperature).state);
                      }
                      return temp_text;
                    }
                    return "--°C";
                  text_font: roboto24
                  text_color: yellow_color
                  #align: TOP_RIGHT
                  x: 235
                  y: 70
                  border_width: 0

              # Row 3: Humidity and Pressure with icons
              - image:
                  src: humidity_icon
                  x: 0
                  y: 120
              - label:
                  id: humidity_label
                  text: !lambda |-
                    if (id(owm_humidity).has_state()) {
                      static char hum_text[20];
                      snprintf(hum_text, sizeof(hum_text), "%.0f%%", id(owm_humidity).state);
                      return hum_text;
                    }
                    return "--%";
                  text_font: roboto24
                  #align: LEFT_MID
                  text_color: yellow_color
                  x: 30
                  y: 120

              - image:
                  src: pressure
                  x: 200
                  y: 120
              - label:
                  id: pressure_label
                  text: !lambda |-
                    if (id(owm_pressure).has_state()) {
                      static char press_text[20];
                      snprintf(press_text, sizeof(press_text), "%.0fhPa", id(owm_pressure).state);
                      return press_text;
                    }
                    return "--hPa";
                  text_font: roboto24
                  #align: RIGHT_MID
                  text_color: yellow_color
                  x: 230
                  y: 120

              # Row 4: Wind and Visibility with icons
              - image:
                  src: wind_icon
                  x: 0
                  y: 165
              - label:
                  id: wind_info_label
                  text: !lambda |-
                    if (id(owm_wind_speed).has_state()) {
                      static char wind_text[30];
                      if (id(owm_wind_gust).has_state() && id(owm_wind_gust).state > id(owm_wind_speed).state) {
                        snprintf(wind_text, sizeof(wind_text), "%.1fm/s (%.1f)", 
                                id(owm_wind_speed).state, id(owm_wind_gust).state);
                      } else {
                        snprintf(wind_text, sizeof(wind_text), "%.1fm/s", id(owm_wind_speed).state);
                      }
                      return wind_text;
                    }
                    return "--m/s";
                  text_font: roboto24
                  #align: BOTTOM_LEFT
                  text_color: yellow_color
                  x: 30
                  y: 165

              - image:
                  src: visibility_icon
                  x: 200
                  y: 165
              - label:
                  id: visibility_label
                  text: !lambda |-
                    if (id(owm_visibility).has_state()) {
                      static char vis_text[20];
                      snprintf(vis_text, sizeof(vis_text), "%.1fkm", id(owm_visibility).state);
                      return vis_text;
                    }
                    return "--km";
                  text_font: roboto24
                  #align: BOTTOM_LEFT
                  text_color: yellow_color
                  x: 230
                  y: 165

              # Location name
              - label:
                  id: location_display_label
                  text: !lambda "return id(location_name_str);"
                  text_font: roboto24
                  align: center
                  text_color: black_color
                  x: 0
                  y: 110
                  border_width: 0
                  width: 440

        # Status and IP section
        - obj:
            width: 460
            scrollable: false # Add this
            height: 85
            bg_color: 0x000000
            bg_opa: 0%
            radius: 10
            x: 10
            y: 420
            border_width: 0
            widgets:
              - label:
                  id: status_label
                  hidden: true
                  text: "Ready"
                  text_color: 0xFFFFFF
                  text_font: roboto
                  align: center
                  x: 0
                  y: 5
                  border_width: 0
              - label:
                  id: ip_address_label
                  align: center
                  text: "WiFi: Not connected"
                  text_color: ha_blue
                  text_font: roboto
                  x: 0
                  y: 30

        # Navigation buttons
        - button:
            id: controls_nav_button
            x: 10
            y: 430
            width: 100
            height: 45
            styles: nav_button_style
            widgets:
              - label:
                  text: "Controls"
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lvgl.page.next:

    # Controls Page - Light Control Buttons
    - id: controls_page
      skip: false
      bg_color: 0x000000
      bg_opa: cover
      pad_all: 0
      border_width: 0
      scrollable: false
      widgets:
        # Background image for controls page
        - image:
            src: background_image
            x: 0
            y: 0
            width: 480
            height: 480
            align: TOP_LEFT

        # Update Switch 1 - Light Control
        - button:
            id: sw1_button
            width: 400
            height: 70
            x: 40
            y: 50
            checkable: true
            widgets:
              - label:
                  text: " Light Control"
                  text_font: roboto24
                  align: center
            on_click:
              then:
                - switch.toggle: sw1
                - lambda: |-
                    id(sw1_manual_override_time) = id(time_comp).now().timestamp;

        # Update Switch 2 - Water Pump
        - button:
            id: sw2_button
            width: 400
            height: 70
            x: 40
            y: 140
            checkable: true
            widgets:
              - label:
                  text: "Pump"
                  text_font: roboto24
                  align: center
            on_click:
              then:
                - switch.toggle: sw2
                - lambda: |-
                    id(sw2_manual_override_time) = id(time_comp).now().timestamp;

        # Update Switch 3 - Irrigation Valve
        - button:
            id: sw3_button
            width: 400
            height: 70
            x: 40
            y: 230
            checkable: true
            widgets:
              - label:
                  id: sw3_button_label
                  text: !lambda |-
                    if (id(valve_training_mode)) {
                      return "Valve (TRAINING MODE)";
                    } else if (id(sw3_winter_mode)) {
                      return " Valve (Winter)";
                    } else {
                      return " Valve (Summer)";
                    }
                  text_font: roboto24
                  align: center
            on_click:
              then:
                - switch.toggle: sw3
                - lambda: |-
                    id(sw3_manual_override_time) = id(time_comp).now().timestamp;

        # Add irrigation status display
        - obj:
            width: 460
            height: 100
            bg_color: 0x000000
            bg_opa: 10%
            radius: 10
            x: 10
            y: 310
            widgets:
              - label:
                  id: irrigation_summary_line1
                  text: !lambda |-
                    static char line1_text[60];
                    snprintf(line1_text, sizeof(line1_text), 
                            "Field: %.1fm^2 | Flow: %.1fL/min", 
                            id(field_area_m2), id(valve_liters_per_minute));
                    return line1_text;
                  text_font: roboto
                  text_color: black_color
                  align: center
                  x: 0
                  y: 0
                  border_width: 0

              - label:
                  id: irrigation_summary_line2
                  text: !lambda |-
                    static char line2_text[60];
                    snprintf(line2_text, sizeof(line2_text), 
                            "Evap: %.1fL/day | Need: %.1fL", 
                            id(calculated_evaporation_liters), id(irrigation_needed_liters));
                    return line2_text;
                  text_font: roboto
                  text_color: black_color
                  align: center
                  x: 0
                  y: 20
                  border_width: 0

        # Navigation buttons
        - button:
            id: home_nav_button
            x: 10
            y: 430
            width: 100
            height: 45
            styles: nav_button_style
            widgets:
              - label:
                  text: "Home"
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lvgl.page.previous:

        - button:
            id: settings_nav_button2
            x: 110
            y: 430
            width: 100
            height: 45
            styles: nav_button_style
            widgets:
              - label:
                  text: "Settings"
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lvgl.page.next:

    # Settings Page
    - id: settings_page
      bg_color: 0x000000
      bg_opa: cover
      pad_all: 0
      border_width: 0
      scrollable: false
      widgets:
        # Background image for settings page
        - image:
            src: background_image
            x: 0
            y: 0
            width: 480
            height: 480
            align: TOP_LEFT
        # Title bar
        - obj:
            width: 460
            height: 50
            bg_color: 0x1E3A8A
            bg_opa: 80%
            radius: 10
            x: 10
            y: 10
            widgets:
              - label:
                  text: "DEVICE SETTINGS"
                  text_font: roboto24
                  align: center
                  text_color: 0xFFFFFF
                  x: 0
                  y: 2
                  scrollable: false
                # QR Code settings container (replaces location settings)
        - obj:
            width: 460
            height: 120
            bg_color: 0x000000
            bg_opa: 20%
            border_width: 0
            scrollable: false
            radius: 10
            x: 10
            y: 80
            widgets:
              - label:
                  text: "Device Settings Over Web"
                  text_font: roboto24
                  text_color: 0xFFFFFF
                  x: 10
                  y: 10
                  align: center
              - label:
                  text: "Scan QR code to configure device via web:"
                  text_font: roboto
                  x: 10
                  y: 40
                  text_color: 0xCCCCCC
                  align: center

              - label:
                  id: qr_url_label
                  text: !lambda |-
                    if (id(ip_address).has_state() && !id(ip_address).state.empty()) {
                      std::string raw = id(ip_address).state;
                      std::string clean_ip = "";
                      
                      // Extract only digits and dots
                      bool found_digit = false;
                      for (char c : raw) {
                        if (std::isdigit(c)) {
                          clean_ip += c;
                          found_digit = true;
                        } else if (c == '.' && found_digit) {
                          clean_ip += c;
                        } else if (found_digit && !std::isdigit(c) && c != '.') {
                          break;
                        }
                      }
                      
                      // Validate IP format
                      int dot_count = std::count(clean_ip.begin(), clean_ip.end(), '.');
                      if (dot_count == 3 && clean_ip.length() >= 7 && clean_ip.length() <= 15) {
                        return "http://" + clean_ip;
                      }
                    }
                    return "Waiting for IP address...";
                  text_font: roboto
                  x: 10
                  y: 65
                  text_color: 0xFFFFFF
                  width: 320
                  align: center
        - obj:
            width: 460
            height: 120
            bg_color: 0x000000
            bg_opa: 0%
            border_width: 0
            scrollable: false
            radius: 10
            x: 5
            y: 190
            widgets:
              - qrcode:
                  id: settings_qr
                  x: 200
                  y: 10
                  light_color: whitesmoke
                  dark_color: steelblue
                  size: 100
                  text: !lambda |-
                    if (id(ip_address).has_state() && !id(ip_address).state.empty()) {
                     return "phijo-smart-device.local/";
                    }
                    return "http://192.168.4.1/";

        - button:
            id: valve_training_btn
            x: 230
            y: 420
            width: 120
            height: 45
            styles: nav_button_style
            widgets:
              - label:
                  text: !lambda |-
                    if (id(valve_training_mode)) {
                      return "Training...";
                    }
                    return "Train Valve";
                  text_font: roboto
                  align: center
                  text_color: !lambda |-
                    if (id(valve_training_mode)) {
                      return lv_color_hex(0xFFA500);  // Orange
                    }
                    return lv_color_hex(0xCCCCCC);  // GREY
                  on_click:
                    then:
                      - script.execute: start_valve_training

        # SW3 Mode Toggle
        - button:
            id: sw3_mode_toggle
            width: 460
            height: 60
            x: 10
            y: 310
            checkable: true
            state:
              checked: !lambda "return id(sw3_winter_mode);"
            widgets:
              - label:
                  id: sw3_mode_label
                  text: !lambda |-
                    if (id(sw3_winter_mode)) {
                      return "SW3 Mode: Winter (Rain-based)";
                    } else {
                      return "SW3 Mode: Summer (Temperature-based)";
                    }
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lambda: |-
                    id(sw3_winter_mode) = !id(sw3_winter_mode);
                - if:
                    condition:
                      lambda: "return id(sw3_winter_mode);"
                    then:
                      - lvgl.label.update:
                          id: sw3_mode_label
                          text: "SW3 Mode: Winter (Rain-based)"
                      - lvgl.label.update:
                          id: sw3_button_label
                          text: "Weather Light (Winter)"
                    else:
                      - lvgl.label.update:
                          id: sw3_mode_label
                          text: "Summer (Temperature-based)"
                      - lvgl.label.update:
                          id: sw3_button_label
                          text: "Light (Summer)"

        # Navigation buttons
        - button:
            id: home_button
            x: 10
            y: 420
            width: 100
            height: 45
            styles: nav_button_style
            widgets:
              - label:
                  text: "Controls"
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lvgl.page.previous:
                # In your existing settings page, add this button
        - button:
            id: light_automation_btn
            x: 120
            y: 420
            width: 100
            height: 45
            styles: nav_button_style
            widgets:
              - label:
                  text: "Light Set"
                  text_font: roboto
                  align: center
            on_click:
              then:
                - lvgl.page.next:

        # Light Automation Settings Page
    - id: light_settings_page
      bg_color: 0x000000
      bg_opa: cover
      pad_all: 0
      border_width: 0
      scrollable: false
      widgets:
        # Background image
        - image:
            src: background_image
            x: 0
            y: 0
            width: 480
            height: 480
            align: TOP_LEFT

        # Title bar
        - obj:
            width: 460
            height: 50
            bg_color: 0x1E3A8A
            bg_opa: 80%
            radius: 10
            x: 10
            y: 10
            widgets:
              - label:
                  text: "LIGHT SETTINGS"
                  text_font: roboto24
                  align: center
                  text_color: 0xFFFFFF
                  x: 0
                  y: 5
                  on_click:
                    then:
                      - lvgl.page.previous:
                      - lambda: |-
                          id(current_page) = 1;  // Set current page to settings

        # Sunset Settings
        - obj:
            width: 460
            height: 120
            bg_color: 0x000000
            bg_opa: 50%
            radius: 10
            scrollable: false
            x: 10
            y: 70
            widgets:
              - label:
                  text: "Sunset Settings"
                  text_font: roboto24
                  text_color: 0xFFFFFF
                  x: 10
                  y: 5

              # Sunset duration setting
              - label:
                  text: "Light on after sunset for:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 35
              - button:
                  id: sunset_hours_minus
                  x: 250
                  y: 30
                  width: 40
                  height: 30
                  widgets:
                    - label:
                        text: "-"
                        align: center
                  on_click:
                    then:
                      - number.decrement: sunset_hours_input
              - label:
                  id: sunset_hours_display
                  text: !lambda |-
                    static char text[20];
                    snprintf(text, sizeof(text), "%d hours", id(sunset_duration_hours));
                    return text;
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 300
                  y: 35
              - button:
                  id: sunset_hours_plus
                  x: 380
                  y: 30
                  width: 40
                  height: 30
                  widgets:
                    - label:
                        text: "+"
                        align: center
                  on_click:
                    then:
                      - number.increment: sunset_hours_input

              # Until time setting
              - label:
                  text: "Or until time:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 70
              - button:
                  id: until_hour_minus
                  x: 150
                  y: 65
                  width: 30
                  height: 30
                  widgets:
                    - label:
                        text: "-"
                        align: center
                  on_click:
                    then:
                      - number.decrement: until_time_hour_input
              - label:
                  id: until_time_display
                  text: !lambda |-
                    static char text[20];
                    snprintf(text, sizeof(text), "%02d:%02d", id(sunset_until_time_hour), id(sunset_until_time_minute));
                    return text;
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 190
                  y: 70
              - button:
                  id: until_hour_plus
                  x: 250
                  y: 65
                  width: 30
                  height: 30
                  widgets:
                    - label:
                        text: "+"
                        align: center
                  on_click:
                    then:
                      - number.increment: until_time_hour_input
              - button:
                  id: until_minute_minus
                  x: 290
                  y: 65
                  width: 30
                  height: 30
                  widgets:
                    - label:
                        text: "-"
                        align: center
                  on_click:
                    then:
                      - number.decrement: until_time_minute_input
              - button:
                  id: until_minute_plus
                  x: 330
                  y: 65
                  width: 30
                  height: 30
                  widgets:
                    - label:
                        text: "+"
                        align: center
                  on_click:
                    then:
                      - number.increment: until_time_minute_input

        # Sunrise Settings
        - obj:
            width: 460
            height: 80
            bg_color: 0x000000
            bg_opa: 50%
            radius: 10
            scrollable: false
            x: 10
            y: 200
            widgets:
              - label:
                  text: "Sunrise  Settings"
                  text_font: roboto24
                  text_color: 0xFFFFFF
                  x: 10
                  y: 5

              - label:
                  text: "Light on before sunrise for:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 35
              - button:
                  id: sunrise_hours_minus
                  x: 250
                  y: 30
                  width: 40
                  height: 30
                  widgets:
                    - label:
                        text: "-"
                        align: center
                  on_click:
                    then:
                      - number.decrement: sunrise_hours_input
              - label:
                  id: sunrise_hours_display
                  text: !lambda |-
                    static char text[20];
                    snprintf(text, sizeof(text), "%d hours", id(sunrise_duration_hours));
                    return text;
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 300
                  y: 35
              - button:
                  id: sunrise_hours_plus
                  x: 380
                  y: 30
                  width: 40
                  height: 30
                  widgets:
                    - label:
                        text: "+"
                        align: center
                  on_click:
                    then:
                      - number.increment: sunrise_hours_input

        # Manual Settings
        - obj:
            width: 460
            height: 80
            bg_color: 0x000000
            bg_opa: 50%
            radius: 10
            x: 10
            y: 290
            widgets:
              - label:
                  text: "Manual Control Settings"
                  text_font: roboto24
                  text_color: 0xFFFFFF
                  scrollable: false
                  x: 10
                  y: 5

              - label:
                  text: "Manual on duration:"
                  text_font: roboto
                  text_color: 0xCCCCCC
                  x: 10
                  y: 35
              - button:
                  id: manual_hours_minus
                  x: 250
                  y: 30
                  width: 40
                  height: 30
                  widgets:
                    - label:
                        text: "-"
                        align: center
                  on_click:
                    then:
                      - number.decrement: manual_hours_input
              - label:
                  id: manual_hours_display
                  text: !lambda |-
                    static char text[20];
                    snprintf(text, sizeof(text), "%d hours", id(manual_duration_hours));
                    return text;
                  text_font: roboto
                  text_color: 0xFFFFFF
                  x: 300
                  y: 35
              - button:
                  id: manual_hours_plus
                  x: 380
                  y: 30
                  width: 40
                  height: 30
                  widgets:
                    - label:
                        text: "+"
                        align: center
                  on_click:
                    then:
                      - number.increment: manual_hours_input

        # Mode Selection
        - obj:
            width: 460
            height: 100
            bg_color: 0x000000
            bg_opa: 50%
            radius: 10
            x: 10
            y: 380
            widgets:
              - label:
                  text: "Automation Mode"
                  text_font: roboto24
                  text_color: 0xFFFFFF
                  x: 10
                  y: 5
              - button:
                  id: mode_duration_btn
                  x: 10
                  y: 35
                  width: 100
                  height: 30
                  checkable: true
                  widgets:
                    - label:
                        text: "Duration"
                        align: center
                        text_font: roboto
                  on_click:
                    then:
                      - lambda: |-
                          id(automation_mode) = 0;
                      - lvgl.widget.update:
                          id: mode_duration_btn
                          state:
                            checked: true
                      - lvgl.widget.update:
                          id: mode_until_btn
                          state:
                            checked: false
                      - lvgl.widget.update:
                          id: mode_between_btn
                          state:
                            checked: false
                      - lvgl.widget.update:
                          id: mode_manual_btn
                          state:
                            checked: false

              - button:
                  id: mode_until_btn
                  x: 120
                  y: 35
                  width: 100
                  height: 30
                  checkable: true
                  widgets:
                    - label:
                        text: "Until Time"
                        align: center
                        text_font: roboto
                  on_click:
                    then:
                      - lambda: |-
                          id(automation_mode) = 1;
                      - lvgl.widget.update:
                          id: mode_duration_btn
                          state:
                            checked: false
                      - lvgl.widget.update:
                          id: mode_until_btn
                          state:
                            checked: true
                      - lvgl.widget.update:
                          id: mode_between_btn
                          state:
                            checked: false
                      - lvgl.widget.update:
                          id: mode_manual_btn
                          state:
                            checked: false

              - button:
                  id: mode_between_btn
                  x: 230
                  y: 35
                  width: 100
                  height: 30
                  checkable: true
                  widgets:
                    - label:
                        text: "Between"
                        align: center
                        text_font: roboto
                  on_click:
                    then:
                      - lambda: |-
                          id(automation_mode) = 2;
                      - lvgl.widget.update:
                          id: mode_duration_btn
                          state:
                            checked: false
                      - lvgl.widget.update:
                          id: mode_until_btn
                          state:
                            checked: false
                      - lvgl.widget.update:
                          id: mode_between_btn
                          state:
                            checked: true
                      - lvgl.widget.update:
                          id: mode_manual_btn
                          state:
                            checked: false
              - button:
                  id: mode_manual_btn
                  x: 230
                  y: 0
                  width: 100
                  height: 30
                  checkable: true
                  widgets:
                    - label:
                        text: "Manual"
                        align: center
                        text_font: roboto
                  on_click:
                    then:
                      - lambda: |-
                          id(automation_mode) = 3;
                      - lvgl.widget.update:
                          id: mode_duration_btn
                          state:
                            checked: false
                      - lvgl.widget.update:
                          id: mode_until_btn
                          state:
                            checked: false
                      - lvgl.widget.update:
                          id: mode_between_btn
                          state:
                            checked: false

              - button:
                  id: back_manual_btn
                  x: 340
                  y: 0
                  width: 100
                  height: 30
                  checkable: true
                  widgets:
                    - label:
                        text: "Back"
                        align: center
                        text_font: roboto
                  on_click:
                    then:
                      lvgl.page.previous:

              # Navigation buttons
              - button:
                  id: back_to_settings_btn
                  x: 340
                  y: 35
                  width: 100
                  height: 30
                  styles: nav_button_style
                  widgets:
                    - label:
                        text: "Next"
                        text_font: roboto
                        align: center
                  on_click:
                    then:
                      - lvgl.page.next:

    - id: water_pump_settings_page
      bg_color: 0x000000
      #bg_opa: cover
      pad_all: 0
      border_width: 0
      scrollable: true
      widgets:
        # Background image
        - image:
            src: background_image
            x: 0
            y: 0
            width: 480
            height: 480
            align: TOP_LEFT

        # Title bar
        - obj:
            width: 460
            height: 50
            bg_color: 0x1E3A8A
            bg_opa: 80%
            radius: 10
            x: 10
            y: 10
            scrollable: false
            widgets:
              - label:
                  text: "VALVE SETTINGS - WATER FILL/RELEASE"
                  text_font: roboto24
                  align: center
                  text_color: 0xFFFFFF
                  border_width: 0
                  x: 0
                  y: 5
                  scrollable: false
                  on_click:
                    then:
                      - lvgl.page.previous:
                      - lambda: |-
                          id(current_page) = 1;  // Set current page to settings

        # Irrigation Calculations Section
        - obj:
            scrollable: false
            width: 460
            height: 160
            #bg_color: 0x000000
            bg_opa: 20%
            radius: 10
            x: 10
            y: 70
            widgets:
              - label:
                  text: "Daily Water Calculations"
                  text_font: roboto24
                  text_color: 0xFFFFFF
                  x: 10
                  y: 5
              - label:
                  text: "Evaporation:"
                  text_font: roboto
                  x: 10
                  y: 35
                  text_color: 0xCCCCCC
              - label:
                  id: evaporation_display
                  text: !lambda |-
                    static char evap_text[40];
                    snprintf(evap_text, sizeof(evap_text), "%.1f L/day", id(calculated_evaporation_liters));
                    return evap_text;
                  text_font: roboto
                  x: 120
                  y: 35
                  text_color: 0xFFFFFF
              - label:
                  text: "Rainfall:"
                  text_font: roboto
                  x: 10
                  y: 60
                  text_color: 0xCCCCCC
              - label:
                  id: rainfall_display
                  text: !lambda |-
                    static char rain_text[40];
                    float rainfall_liters = id(daily_rainfall_mm) * id(field_area_m2) / 1000.0;
                    snprintf(rain_text, sizeof(rain_text), "%.1f L (%.1fmm)", rainfall_liters, id(daily_rainfall_mm));
                    return rain_text;
                  text_font: roboto
                  x: 80
                  y: 60
                  text_color: 0xFFFFFF
              - label:
                  text: "Today :"
                  text_font: roboto
                  x: 10
                  y: 85
                  text_color: 0xCCCCCC
              - label:
                  id: irrigation_needed_display
                  text: !lambda |-
                    static char need_text[50];
                    if (id(irrigation_needed_liters) > 0) {
                      float minutes_needed = id(irrigation_needed_liters) / id(valve_liters_per_minute);
                      snprintf(need_text, sizeof(need_text), "%.1f L (%.1f min)", 
                              id(irrigation_needed_liters), minutes_needed);
                    } else {
                      snprintf(need_text, sizeof(need_text), "0 L (No irrigation needed)");
                    }
                    return need_text;
                  text_font: roboto
                  x: 150
                  y: 85
                  text_color: !lambda |-
                    if (id(irrigation_needed_liters) > 0) {
                      return lv_color_hex(0xFFA500);  // Orange
                    }
                    return lv_color_hex(0x00FF00);  // Green - no irrigation needed
              - label:
                  text: "Mode:"
                  text_font: roboto
                  x: 10
                  y: 110
                  text_color: 0xCCCCCC
              - label:
                  id: irrigation_mode_display
                  text: !lambda |-
                    if (id(sw3_winter_mode)) {
                      return "Winter (Low evaporation)";
                    } else {
                      return "Summer (High evaporation)";
                    }
                  text_font: roboto
                  x: 60
                  y: 110
                  text_color: 0xFFFFFF

        # Weather Impact Section
        - obj:
            width: 460
            height: 110
            bg_color: 0x000000
            bg_opa: 0%
            scrollable: false
            border_width: 0
            radius: 10
            x: 10
            y: 230
            widgets:
              - label:
                  text: "Weather Impact"
                  text_font: roboto24
                  text_color: 0xFFFFFF
                  x: 10
                  y: 5
              - label:
                  text: "Temperature:"
                  text_font: roboto
                  x: 10
                  y: 35
                  text_color: 0xCCCCCC
              - label:
                  id: temp_impact_display
                  text: !lambda |-
                    static char temp_text[40];
                    if (id(owm_temperature).has_state()) {
                      snprintf(temp_text, sizeof(temp_text), "%.1f°C", id(owm_temperature).state);
                    } else {
                      snprintf(temp_text, sizeof(temp_text), "--°C");
                    }
                    return temp_text;
                  text_font: roboto
                  x: 120
                  y: 35
                  text_color: 0xFFFFFF
              - label:
                  text: "Humidity:"
                  text_font: roboto
                  x: 200
                  y: 35
                  text_color: 0xCCCCCC
              - label:
                  id: humidity_impact_display
                  text: !lambda |-
                    static char hum_text[40];
                    if (id(owm_humidity).has_state()) {
                      snprintf(hum_text, sizeof(hum_text), "%.0f%%", id(owm_humidity).state);
                    } else {
                      snprintf(hum_text, sizeof(hum_text), "--%");
                    }
                    return hum_text;
                  text_font: roboto
                  x: 270
                  y: 35
                  text_color: 0xFFFFFF
              - label:
                  id: weather_recommendation
                  text: !lambda |-
                    if (id(irrigation_needed_liters) > 20) {
                      return " High irrigation needs - Check valve operation";
                    } else if (id(irrigation_needed_liters) > 5) {
                      return " Moderate irrigation recommended";
                    } else if (id(daily_rainfall_mm) > 10) {
                      return " Recent rainfall - Irrigation not needed";
                    } else {
                      return " Water levels optimal";
                    }
                  text_font: roboto
                  x: 10
                  y: 60
                  text_color: 0xFFFFFF
                  width: 440

        # Control Buttons Section
        - obj:
            width: 460
            height: 100
            bg_color: 0x000000
            bg_opa: 0%
            radius: 10
            scrollable: false
            border_width: 0
            x: 10
            y: 350
            widgets:
              - button:
                  id: winter_summer_toggle
                  x: 2
                  y: 10
                  width: 150
                  height: 60
                  checkable: true
                  state:
                    checked: !lambda "return id(sw3_winter_mode);"
                  widgets:
                    - label:
                        id: season_mode_label
                        text: !lambda |-
                          if (id(sw3_winter_mode)) {
                            return "Winter Mode";
                          } else {
                            return "Summer Mode";
                          }
                        text_font: roboto
                        align: center
                  on_click:
                    then:
                      - lambda: |-
                          id(sw3_winter_mode) = !id(sw3_winter_mode);
                      - script.execute: calculate_irrigation_needs
                      - if:
                          condition:
                            lambda: "return id(sw3_winter_mode);"
                          then:
                            - lvgl.label.update:
                                id: season_mode_label
                                text: "Winter Mode"
                          else:
                            - lvgl.label.update:
                                id: season_mode_label
                                text: "Summer Mode"

              - button:
                  id: manual_irrigation_btn
                  x: 160
                  y: 10
                  width: 130
                  height: 60
                  widgets:
                    - label:
                        text: "Manual"
                        text_font: roboto
                        align: center
                  on_click:
                    then:
                      - switch.toggle: sw3
                      - lambda: |-
                          id(sw3_manual_override_time) = id(time_comp).now().timestamp;

              - button:
                  id: back_to_controls_btn
                  x: 300
                  y: 10
                  width: 150
                  height: 60
                  widgets:
                    - label:
                        text: "Back to Controls"
                        text_font: roboto
                        align: center
                  on_click:
                    then:
                      - lvgl.page.previous:

#-------------------------------------------
# Internal outputs
#-------------------------------------------
output:
  # Backlight LED
  - platform: ledc
    pin: GPIO38
    id: GPIO38
    frequency: 100Hz

  # Built in 240v relay
  - id: internal_relay_1
    platform: gpio
    pin: 40

  # Additional relays (3 relay model)
  - id: internal_relay_2
    platform: gpio
    pin: 2
  - id: internal_relay_3
    platform: gpio
    pin: 1

#-------------------------------------------
# Internal lights and switches
#-------------------------------------------
light:
  - platform: monochromatic
    output: GPIO38
    name: Backlight
    id: backlight
    restore_mode: ALWAYS_ON

switch:
  - platform: output
    id: sw1
    name: "Light Control"
    output: internal_relay_1
    on_turn_on:
      then:
        - lvgl.widget.update:
            id: sw1_button
            state:
              checked: true
        - lvgl.label.update:
            id: status_label
            text: "Light ON"
            text_color: green_color
    on_turn_off:
      then:
        - lvgl.widget.update:
            id: sw1_button
            state:
              checked: false
        - lvgl.label.update:
            id: status_label
            text: "Light OFF"
            text_color: red_color

  - platform: output
    id: sw2
    name: "Water Pump"
    output: internal_relay_2
    on_turn_on:
      then:
        - lvgl.widget.update:
            id: sw2_button
            state:
              checked: true
        - lvgl.label.update:
            id: status_label
            text: "Water Pump ON"
            text_color: green_color
    on_turn_off:
      then:
        - lvgl.widget.update:
            id: sw2_button
            state:
              checked: false
        - lvgl.label.update:
            id: status_label
            text: "Water Pump OFF"
            text_color: red_color

  - platform: output
    id: sw3
    name: "Irrigation Valve"
    output: internal_relay_3
    on_turn_on:
      then:
        - if:
            condition:
              lambda: "return id(valve_training_mode);"
            then:
              - lambda: |-
                  id(valve_training_start_time) = id(time_comp).now().timestamp;
                  ESP_LOGI("irrigation", "Training mode: Valve opened, timer started");
              - lvgl.label.update:
                  id: status_label
                  text: "TRAINING: Valve ON - Timer running"
                  text_color: orange_color
            else:
              - lambda: |-
                  float estimated_minutes = 0;
                  if (id(irrigation_needed_liters) > 0 && id(valve_liters_per_minute) > 0) {
                    estimated_minutes = id(irrigation_needed_liters) / id(valve_liters_per_minute);
                  }
                  ESP_LOGI("irrigation", "Irrigation started - estimated %.1f minutes needed", estimated_minutes);
              - lvgl.label.update:
                  id: status_label
                  text: !lambda |-
                    static char msg[80];
                    float est_min = id(irrigation_needed_liters) / id(valve_liters_per_minute);
                    snprintf(msg, sizeof(msg), "Irrigation ON (est. %.1f min)", est_min);
                    return msg;
                  text_color: green_color
        - lvgl.widget.update:
            id: sw3_button
            state:
              checked: true
    on_turn_off:
      then:
        - if:
            condition:
              lambda: "return id(valve_training_mode) && id(valve_training_start_time) > 0;"
            then:
              - lambda: |-
                  int training_duration = id(time_comp).now().timestamp - id(valve_training_start_time);
                  float training_minutes = training_duration / 60.0f;

                  // Calculate flow rate based on estimated water delivered
                  // This is a simplified calculation - in reality you'd measure actual water
                  if (training_minutes > 0.5f) {  // Minimum 30 seconds for valid training
                    // Assume we delivered the amount of water equivalent to today's evaporation needs
                    float estimated_liters = std::max(10.0f, id(calculated_evaporation_liters));
                    id(valve_liters_per_minute) = estimated_liters / training_minutes;
                    
                    ESP_LOGI("irrigation", "Training complete: %.1f minutes = %.1f L/min flow rate", 
                            training_minutes, id(valve_liters_per_minute));
                  }

                  id(valve_training_start_time) = 0;
                  id(valve_training_mode) = false;
              - lvgl.label.update:
                  id: status_label
                  text: !lambda |-
                    static char msg[100];
                    snprintf(msg, sizeof(msg), "Training complete: %.1f L/min calibrated", id(valve_liters_per_minute));
                    return msg;
                  text_color: green_color
              - delay: 3s
              - lvgl.label.update:
                  id: status_label
                  text: "Valve calibration saved"
                  text_color: blue_color
            else:
              - lambda: |-
                  ESP_LOGI("irrigation", "Irrigation stopped");
              - lvgl.label.update:
                  id: status_label
                  text: "Irrigation Valve OFF"
                  text_color: red_color
        - lvgl.widget.update:
            id: sw3_button
            state:
              checked: false

#-------------------------------------------
# Scripts for automation logic
#-------------------------------------------
script:
  # ... your existing scripts ...

  - id: toggle_wifi_popup
    then:
      - lambda: |-
          id(wifi_popup_visible) = !id(wifi_popup_visible);
      - if:
          condition:
            lambda: "return id(wifi_popup_visible);"
          then:
            - lvgl.widget.show: wifi_popup_obj
            # Update all WiFi info when showing popup
            - lvgl.label.update:
                id: wifi_status_text
                text: !lambda |-
                  if (wifi::global_wifi_component->is_connected()) {
                    return "Connected";
                  } else {
                    return "Disconnected";
                  }
            - lvgl.label.update:
                id: wifi_ssid_text
                text: !lambda |-
                  if (id(wifi_ssid).has_state()) {
                    return id(wifi_ssid).state.c_str();
                  }
                  return "N/A";
            - lvgl.label.update:
                id: wifi_bssid_text
                text: !lambda |-
                  if (id(wifi_bssid).has_state()) {
                    return id(wifi_bssid).state.c_str();
                  }
                  return "N/A";
            - lvgl.label.update:
                id: wifi_rssi_text
                text: !lambda |-
                  if (id(wifi_rssi).has_state()) {
                    static char rssi_text[20];
                    snprintf(rssi_text, sizeof(rssi_text), "%.0f dBm", id(wifi_rssi).state);
                    return rssi_text;
                  }
                  return "N/A";
            - lvgl.label.update:
                id: wifi_ip_text
                text: !lambda |-
                  if (id(ip_address).has_state()) {
                    return id(ip_address).state.c_str();
                  }
                  return "N/A";
            - lvgl.label.update:
                id: wifi_gateway_text
                text: !lambda |-
                  if (id(wifi_gateway).has_state()) {
                    return id(wifi_gateway).state.c_str();
                  }
                  return "N/A";
            - lvgl.label.update:
                id: wifi_subnet_text
                text: !lambda |-
                  if (id(wifi_subnet).has_state()) {
                    return id(wifi_subnet).state.c_str();
                  }
                  return "N/A";
            - lvgl.label.update:
                id: wifi_dns_text
                text: !lambda |-
                  if (id(wifi_dns).has_state()) {
                    return id(wifi_dns).state.c_str();
                  }
                  return "N/A";
            - lvgl.label.update:
                id: wifi_mac_text
                text: !lambda |-
                  if (id(wifi_mac).has_state()) {
                    return id(wifi_mac).state.c_str();
                  }
                  return "N/A";
          else:
            - lvgl.widget.hide: wifi_popup_obj
  - id: goto_settings
    then:
      - delay: 1000ms
      - lvgl.widget.update:
          id: settings_page
          hidden: false
      - lvgl.widget.redraw:
  #  irrigation calculation script
  - id: calculate_irrigation_needs
    then:
      - lambda: |-
          // Calculate daily evaporation based on temperature and humidity
          float temp = 25.0; // Default, will be updated from weather
          float humidity = 50.0; // Default, will be updated from weather

          if (id(owm_temperature).has_state()) {
            temp = id(owm_temperature).state;
          }
          if (id(owm_humidity).has_state()) {
            humidity = id(owm_humidity).state;
          }

          // Simplified evaporation calculation
          // Based on temperature and humidity for the given area
          float evap_rate_per_m2 = 0.0;

          if (id(sw3_winter_mode)) {
            // Winter mode - lower evaporation
            evap_rate_per_m2 = (temp - 10) * 0.1 * (1 - humidity/100.0);
          } else {
            // Summer mode - higher evaporation
            evap_rate_per_m2 = (temp - 15) * 0.2 * (1 - humidity/100.0);
          }

          if (evap_rate_per_m2 < 0) evap_rate_per_m2 = 0;

          id(calculated_evaporation_liters) = evap_rate_per_m2 * id(field_area_m2);

          // Calculate irrigation needs (evaporation - rainfall)
          id(irrigation_needed_liters) = id(calculated_evaporation_liters) - (id(daily_rainfall_mm) * id(field_area_m2) / 1000.0);
          if (id(irrigation_needed_liters) < 0) id(irrigation_needed_liters) = 0;

          ESP_LOGI("irrigation", "Calculated evaporation: %.1fL, irrigation needed: %.1fL", 
                  id(calculated_evaporation_liters), id(irrigation_needed_liters));

  - id: start_valve_training
    then:
      - if:
          condition:
            lambda: "return !id(valve_training_mode);"
          then:
            - lambda: |-
                id(valve_training_mode) = true;
                ESP_LOGI("irrigation", "Training mode activated - Turn ON valve manually");
            - lvgl.label.update:
                id: status_label
                text: "Training: Turn ON valve manually, then OFF when done"
                text_color: orange_color
          else:
            - lambda: |-
                id(valve_training_mode) = false;
                ESP_LOGI("irrigation", "Training mode cancelled");
            - lvgl.label.update:
                id: status_label
                text: "Training cancelled"
                text_color: red_color

  - id: update_qr_display
    then:
      - component.update: ip_address # Force update the IP sensor first
      - delay: 500ms
      # - lvgl.qrcode.update:
      #     id: settings_qr
      #     text: !lambda |-
      #       if (id(ip_address).has_state() && !id(ip_address).state.empty()) {
      #         return "phijo-smart-device.local/";
      #       }
      #       return "http://192.168.4.1/";

      - lvgl.label.update:
          id: qr_url_label
          text: !lambda |-
            if (id(ip_address).has_state() && !id(ip_address).state.empty()) {
              return ("http://" + id(ip_address).state + "/").c_str();
            }
            return "Waiting for IP address...";

  - id: notify_web_portal
    then:
      - component.update: ip_address # Force update IP sensor
      - delay: 500ms
      - if:
          condition:
            wifi.connected:
          then:
            - lvgl.label.update:
                id: status_label
                text: " "
                text_color: ha_blue
            - logger.log:
                format: "Web portal active at http://%s"
                args:
                  [
                    'id(ip_address).has_state() ? id(ip_address).state.c_str() : "unknown"',
                  ]
                #Update QR code when WiFi is connected
            - lvgl.qrcode.update:
                id: settings_qr
                text: http://phijo-smart-device.local
            - lvgl.label.update:
                id: qr_url_label
                text: !lambda |-
                  if (id(ip_address).has_state() && !id(ip_address).state.empty()) {
                    return ("http://" + id(ip_address).state + "/").c_str();
                  }
                  return "Getting IP address...";
          else:
            - lvgl.label.update:
                id: status_label
                text: "No internet. Connect to AP: PhiJo Smart Products"
                text_color: orange_color
            - logger.log: "No internet. Connect to AP: PhiJo Smart Products"
            # Update QR code for AP mode
            - lvgl.qrcode.update:
                id: settings_qr
                text: "http://192.168.4.1/"
            - lvgl.label.update:
                id: qr_url_label
                text: "http://192.168.4.1/ (AP Mode)"

      - lvgl.label.update:
          id: ip_address_label
          text: !lambda |-
            if (id(ip_address).has_state() && !id(ip_address).state.empty()) {
              return "WiFi: " + id(ip_address).state;
            } else {
              return "WiFi: Not connected";
            }

  - id: time_display_update
    then:
      #- script.execute: notify_web_portal
      - logger.log:
          format: "TIME DEBUG: HA connected: %s, Time valid: %s"
          args:
            [
              'id(api_server).is_connected() ? "YES" : "NO"',
              'id(time_comp).now().is_valid() ? "YES" : "NO"',
            ]
      - lvgl.label.update:
          id: digital_clock
          text: !lambda |-
            auto now = id(time_comp).now();
            if (!now.is_valid()) {
              now = id(sntp_time).now();
            }
            static char time_buf[6];
            sprintf(time_buf, "%02d:%02d", now.hour, now.minute);
            return time_buf;
      - lvgl.label.update:
          id: full_date_label
          text: !lambda |-
            auto now = id(time_comp).now();
            if (!now.is_valid()) {
              now = id(sntp_time).now();
            }
            static const char * const day_names[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
            static const char * const mon_names[] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
            static char date_buf[32];
            sprintf(date_buf, "%s, %s %d, %d", day_names[now.day_of_week - 1], mon_names[now.month-1], now.day_of_month, now.year);
            return date_buf;
      # Weather display updates (no automation logic)
      - lvgl.label.update:
          id: weather_label
          text: !lambda |-
            if (id(weather_condition).has_state()) {
              return id(weather_condition).state.c_str();
            }
            return "Loading ...";
      #  Update temperature label
      - lvgl.label.update:
          id: temperature_label
          text: !lambda |-
            if (id(owm_temperature).has_state()) {
              static char temp_text[50];
              if (id(owm_feels_like).has_state()) {
                snprintf(temp_text, sizeof(temp_text), "%.1f°C feels %.1f°C", 
                        id(owm_temperature).state, id(owm_feels_like).state);
              } else {
                snprintf(temp_text, sizeof(temp_text), "Temperature: %.1f°C", id(owm_temperature).state);
              }
              return temp_text;
            }
            return "Temperature: --°C";

  # Keep existing time_update but remove automation calls
  - id: time_update
    then:
      - script.execute: time_display_update
      # Remove the automation logic from here

  # Modified check_light_schedules with state change prevention
  - id: check_light_schedules
    then:
      - lambda: |-
          auto now = id(time_comp).now();
          if (!now.is_valid()) return; // Don't run if time is invalid

          // Check for manual override timeouts (24 hours = 86400 seconds)
          if (id(sw1_manual_override_time) > 0 && 
              now.timestamp - id(sw1_manual_override_time) > 86400) {
            id(sw1_manual_override_time) = 0;
          }

          // Only run automations if not in manual override mode
          // ---- SWITCH 1: SUNRISE/SUNSET CONTROL WITH USER SETTINGS ----
          if (id(sw1_manual_override_time) == 0) {
            auto sunrise_opt = id(sun_comp).sunrise(0.0);
            if (sunrise_opt.has_value()) {
              auto sunrise = sunrise_opt.value();
              
              // Use user-defined sunrise duration
              int sunrise_seconds = id(sunrise_duration_hours) * 3600;
              
              // Check if it's time to turn on before sunrise
              if (sunrise.timestamp - now.timestamp <= sunrise_seconds && 
                  sunrise.timestamp - now.timestamp > (sunrise_seconds - 60) && 
                  !id(sw1_before_sunrise) && !id(sw1).state) {
                id(sw1).turn_on();
                id(sw1_before_sunrise) = true;
                ESP_LOGI("automation", "SW1 turned ON - %d hours before sunrise", id(sunrise_duration_hours));
              }
              
              // Check if it's sunrise time
              if (abs(sunrise.timestamp - now.timestamp) < 60 && 
                  id(sw1_before_sunrise) && id(sw1).state) {
                id(sw1).turn_off();
                id(sw1_before_sunrise) = false;
                ESP_LOGI("automation", "SW1 turned OFF - sunrise");
              }
            }
            
            // Sunset logic with user settings
            auto sunset_opt = id(sun_comp).sunset(0.0);
            if (sunset_opt.has_value()) {
              auto sunset = sunset_opt.value();
              
              if (abs(sunset.timestamp - now.timestamp) < 60 && 
                  !id(sw1).state && id(sw1_off_time) == 0) {
                id(sw1).turn_on();
                
                // Use automation mode to determine off time
                if (id(automation_mode) == 0) {
                  // Duration mode
                  id(sw1_off_time) = now.timestamp + (id(sunset_duration_hours) * 3600);
                } else if (id(automation_mode) == 1) {
                  // Until time mode
                  auto tomorrow = now;
                  tomorrow.day_of_month += 1;
                  tomorrow.hour = id(sunset_until_time_hour);
                  tomorrow.minute = id(sunset_until_time_minute);
                  tomorrow.second = 0;
                  id(sw1_off_time) = tomorrow.timestamp;
                } else if (id(automation_mode) == 2) {
                  // Between times mode - turn off at sunrise
                  auto next_sunrise = id(sun_comp).sunrise(1.0); // Next day
                  if (next_sunrise.has_value()) {
                    id(sw1_off_time) = next_sunrise.value().timestamp;
                  }
                } else {
                  // Manual mode - use manual duration
                  id(sw1_off_time) = now.timestamp + (id(manual_duration_hours) * 3600);
                }
                
                ESP_LOGI("automation", "SW1 turned ON - sunset (mode: %d)", id(automation_mode));
              }
            }
            
            // Check timer for turn off
            if (id(sw1).state && !id(sw1_before_sunrise) && 
                now.timestamp >= id(sw1_off_time) && id(sw1_off_time) > 0) {
              id(sw1).turn_off();
              id(sw1_off_time) = 0;
              ESP_LOGI("automation", "SW1 turned OFF - timer expired");
            }
          }

          // Similar logic for SW2 
          // ---- SWITCH 3: IRRIGATION VALVE CONTROL ----
          if (id(sw3_manual_override_time) == 0) {
            // Check if irrigation is needed and it's appropriate time
            bool should_irrigate = false;
            
            // Only irrigate during appropriate hours (early morning or evening)
            int hour = now.hour;
            bool appropriate_time = (hour >= 5 && hour <= 7) || (hour >= 18 && hour <= 20);
            
            if (appropriate_time && id(irrigation_needed_liters) > 10.0) {
              if (id(sw3_winter_mode)) {
                // Winter mode: Only irrigate if really needed (>15L)
                should_irrigate = id(irrigation_needed_liters) > 15.0;
              } else {
                // Summer mode: Irrigate if needed (>10L)
                should_irrigate = id(irrigation_needed_liters) > 10.0;
              }
            }
            
            // Turn on irrigation if needed
            if (should_irrigate && !id(sw3).state) {
              // Calculate irrigation time based on needs
              float irrigation_minutes = id(irrigation_needed_liters) / id(valve_liters_per_minute);
              irrigation_minutes = std::min(irrigation_minutes, 30.0f); // Max 30 minutes
              
              id(sw3).turn_on();
              id(sw3_off_time) = now.timestamp + (int)(irrigation_minutes * 60);
              ESP_LOGI("automation", "SW3 irrigation started - %.1f minutes for %.1fL", 
                      irrigation_minutes, id(irrigation_needed_liters));
            }
            // Turn off irrigation when timer expires
            if (id(sw3).state && now.timestamp >= id(sw3_off_time) && id(sw3_off_time) > 0) {
              id(sw3).turn_off();
              id(sw3_off_time) = 0;
              // Reset irrigation needs after watering
              id(irrigation_needed_liters) = std::max(0.0f, id(irrigation_needed_liters) - 
                                                      (id(valve_liters_per_minute) * ((now.timestamp - (id(sw3_off_time) - 1800)) / 60.0f)));
              ESP_LOGI("automation", "SW3 irrigation completed");
            }
          }

#-------------------------------------------
# Graphics and Fonts
#-------------------------------------------
font:
  - file: "gfonts://Roboto"
    id: roboto24
    size: 24
    bpp: 4

  - file: "gfonts://Roboto"
    id: roboto
    size: 18
    bpp: 4

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: icons24
    size: 24
    bpp: 4
    glyphs: [
        "\U000F0335", # mdi-lightbulb
        "\U000F0769", # mdi-ceiling-light
        "\U000F06B5", # mdi-lamp
        "\U000F08DD", # mdi-floor-lamp
        "\U000F12BA", # mdi-string-lights
        "\U000F0493", # mdi-settings
        "\U000F02DC", # mdi-home
        "\U000F0599", # mdi-weather-sunny
        "\U000F0F64", # mdi-weather-night
        "\U000F0596", # mdi-weather-pouring
        "\U000F050F", # mdi-thermometer
      ]

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: light40
    size: 40
    bpp: 4
    glyphs: [
        "\U000F0335", # mdi-lightbulb
        "\U000F0769", # mdi-ceiling-light
        "\U000F06B5", # mdi-lamp
        "\U000F08DD", # mdi-floor-lamp
        "\U000F12BA", # mdi-string-lights
      ]

  - file: "gfonts://Roboto"
    id: roboto_large
    size: 72
    bpp: 4

#-------------------------------------------
# Touchscreen gt911 i2c
#-------------------------------------------
i2c:
  - id: bus_a
    sda: GPIO19
    scl: GPIO45

touchscreen:
  platform: gt911
  transform:
    mirror_x: false
    mirror_y: false
  id: my_touchscreen
  display: my_display

  on_touch:
    - lambda: |-
        ESP_LOGD("touch", "Touch at (%d, %d)", touch.x, touch.y);
        if (!id(touch_active)) {
          // Store initial touch position
          id(touch_start_y) = touch.y;
          id(touch_active) = true;
        }
        // Always update end position while touching
        id(touch_end_y) = touch.y;

  on_release:
    - lambda: |-
        // Calculate swipe distance
        int swipe_distance = id(touch_start_y) - id(touch_end_y);
        int min_swipe_distance = 80;

        ESP_LOGD("swipe", "Start: %d, End: %d, Distance: %d", id(touch_start_y), id(touch_end_y), swipe_distance);

        // Reset touch tracking
        id(touch_active) = false;

        if (abs(swipe_distance) > min_swipe_distance) {
          if (swipe_distance > 0) {
            ESP_LOGD("swipe", "Swipe up detected - next page");
          } else {
            ESP_LOGD("swipe", "Swipe down detected - previous page");
          }
        }
    - if:
        condition:
          lambda: "return (id(touch_start_y) - id(touch_end_y)) > 80;"
        then:
          - lvgl.page.next:
    - if:
        condition:
          lambda: "return (id(touch_end_y) - id(touch_start_y)) > 80;"
        then:
          - lvgl.page.previous:
    - if:
        condition: lvgl.is_paused
        then:
          - light.turn_on: backlight
          - lvgl.resume:
          - lvgl.widget.redraw:

#-------------------------------------------
# Display st7701s spi
#-------------------------------------------
spi:
  - id: lcd_spi
    clk_pin: GPIO48
    mosi_pin: GPIO47

display:
  - platform: st7701s
    id: my_display
    update_interval: never
    auto_clear_enabled: False
    spi_mode: MODE3
    color_order: RGB
    invert_colors: False
    dimensions:
      width: 480
      height: 480
    cs_pin: 39
    de_pin: 18
    hsync_pin: 16
    vsync_pin: 17
    pclk_pin: 21
    pclk_frequency: 12MHz
    pclk_inverted: False
    hsync_pulse_width: 8
    hsync_front_porch: 10
    hsync_back_porch: 20
    vsync_pulse_width: 8
    vsync_front_porch: 10
    vsync_back_porch: 10
    init_sequence:
      - 1
      # Custom sequences are an array, first byte is command, the rest are data.
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x10] # CMD2_BKSEL_BK0
      - [0xCD, 0x00] # disable MDT flag
    data_pins:
      red:
        - 11 #r1
        - 12 #r2
        - 13 #r3
        - 14 #r4
        - 0 #r5
      green:
        - 8 #g0
        - 20 #g1
        - 3 #g2
        - 46 #g3
        - 9 #g4
        - 10 #g5
      blue:
        - 4 #b1
        - 5 #b2
        - 6 #b3
        - 7 #b4
        - 15 #b5
image:
  - file: "images/background.jpg"
    id: background_image
    resize: 480x480
    type: RGB565

  - file: "images/wifi.png"
    id: wifi_icon
    resize: 52x52
    type: RGB565

  - file: "images/cloud.png"
    id: cloud_icon
    resize: 24x24
    type: RGB565

  - file: "images/pressure.png"
    id: pressure
    resize: 24x24
    type: RGB565

  - file: "images/temp.png"
    id: thermometer_icon
    resize: 24x24
    type: RGB565

  - file: "images/humidity.png"
    id: humidity_icon
    resize: 24x24
    type: RGB565

  - file: "images/wind.png"
    id: wind_icon
    resize: 24x24
    type: RGB565

  - file: "images/visibility.png"
    id: visibility_icon
    resize: 24x24
    type: RGB565

interval:
  - interval: 60s # Every 5 minutes
    then:
      - script.execute: calculate_irrigation_needs
      - lambda: |-
          // Update all display elements on the water pump settings page
          if (id(current_page) == 2) {  // If on water pump settings page
            id(lvgl_comp).loop();
          }
  - interval: 20s
    then:
      - lambda: |-
          auto now = id(time_comp).now();
          if (!now.is_valid() || now.year < 2020) {
            ESP_LOGW("time", "Time appears invalid, requesting resync");

          }
      - script.execute: time_display_update
      #- script.execute: update_qr_display
  - interval: 10s
    then:
      - script.execute: notify_web_portal
      - script.execute: check_light_schedules

  - interval: 30s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - logger.log: "Making weather API request..."
            - http_request.get:
                url: "http://api.openweathermap.org/data/2.5/weather?q=Sao%20Bartolomeu%20de%20messines&appid=b0fed035f1b875bafaf66f85d33f4e71&units=metric"
                headers:
                  User-Agent: "ESPHome/1.0"
                capture_response: true
                on_response:
                  then:
                    - lambda: |-
                        ESP_LOGD("weather", "HTTP Status: %d", response);
                        ESP_LOGD("weather", "Response body: %s", body.c_str());

                        if (body.length() > 0) {
                          
                          // Parse temperature
                          size_t temp_pos = body.find("\"temp\":");
                          if (temp_pos != std::string::npos) {
                            size_t start = temp_pos + 7;
                            size_t end = body.find(",", start);
                            if (end == std::string::npos) end = body.find("}", start);
                            
                            if (end != std::string::npos) {
                              std::string temp_str = body.substr(start, end - start);
                              float temperature = std::stof(temp_str);
                              id(owm_temperature).publish_state(temperature);
                              ESP_LOGD("weather", "Temperature: %.1f°C", temperature);
                            }
                          }
                          
                          // Parse feels like temperature
                          size_t feels_pos = body.find("\"feels_like\":");
                          if (feels_pos != std::string::npos) {
                            size_t start = feels_pos + 13;
                            size_t end = body.find(",", start);
                            if (end == std::string::npos) end = body.find("}", start);
                            
                            if (end != std::string::npos) {
                              std::string feels_str = body.substr(start, end - start);
                              float feels_like = std::stof(feels_str);
                              id(owm_feels_like).publish_state(feels_like);
                            }
                          }
                          
                          // Parse humidity
                          size_t humidity_pos = body.find("\"humidity\":");
                          if (humidity_pos != std::string::npos) {
                            size_t start = humidity_pos + 11;
                            size_t end = body.find(",", start);
                            if (end == std::string::npos) end = body.find("}", start);
                            
                            if (end != std::string::npos) {
                              std::string humidity_str = body.substr(start, end - start);
                              float humidity = std::stof(humidity_str);
                              id(owm_humidity).publish_state(humidity);
                              
                            }
                          }
                          
                          // Parse pressure
                          size_t pressure_pos = body.find("\"pressure\":");
                          if (pressure_pos != std::string::npos) {
                            size_t start = pressure_pos + 11;
                            size_t end = body.find(",", start);
                            if (end == std::string::npos) end = body.find("}", start);
                            
                            if (end != std::string::npos) {
                              std::string pressure_str = body.substr(start, end - start);
                              float pressure = std::stof(pressure_str);
                              id(owm_pressure).publish_state(pressure);
                            }
                          }
                          
                          // Parse wind speed
                          size_t wind_pos = body.find("\"speed\":");
                          if (wind_pos != std::string::npos) {
                            size_t start = wind_pos + 8;
                            size_t end = body.find(",", start);
                            if (end == std::string::npos) end = body.find("}", start);
                            
                            if (end != std::string::npos) {
                              std::string wind_str = body.substr(start, end - start);
                              float wind_speed = std::stof(wind_str);
                              id(owm_wind_speed).publish_state(wind_speed);
                             
                            }
                          }
                          
                          
                          size_t gust_pos = body.find("\"gust\":");
                          if (gust_pos != std::string::npos) {
                            size_t start = gust_pos + 7;
                            size_t end = body.find(",", start);
                            if (end == std::string::npos) end = body.find("}", start);
                            
                            if (end != std::string::npos) {
                              std::string gust_str = body.substr(start, end - start);
                              float wind_gust = std::stof(gust_str);
                              id(owm_wind_gust).publish_state(wind_gust);
                              
                            }
                          }
                          
                          // ADD NEW PARSING - Wind direction
                          size_t deg_pos = body.find("\"deg\":");
                          if (deg_pos != std::string::npos) {
                            size_t start = deg_pos + 6;
                            size_t end = body.find(",", start);
                            if (end == std::string::npos) end = body.find("}", start);
                            
                            if (end != std::string::npos) {
                              std::string deg_str = body.substr(start, end - start);
                              float wind_direction = std::stof(deg_str);
                              id(owm_wind_direction).publish_state(wind_direction);
                              
                              }
                          }
                          
                          // ADD NEW PARSING - Visibility
                          size_t vis_pos = body.find("\"visibility\":");
                          if (vis_pos != std::string::npos) {
                            size_t start = vis_pos + 13;
                            size_t end = body.find(",", start);
                            if (end == std::string::npos) end = body.find("}", start);
                            
                            if (end != std::string::npos) {
                              std::string vis_str = body.substr(start, end - start);
                              float visibility = std::stof(vis_str) / 1000.0; // Convert meters to kilometers
                              id(owm_visibility).publish_state(visibility);
                              
                            }
                          }
                          
                          // ADD NEW PARSING - Cloud coverage
                          size_t clouds_pos = body.find("\"all\":");
                          if (clouds_pos != std::string::npos) {
                            size_t start = clouds_pos + 6;
                            size_t end = body.find(",", start);
                            if (end == std::string::npos) end = body.find("}", start);
                            
                            if (end != std::string::npos) {
                              std::string clouds_str = body.substr(start, end - start);
                              float cloud_coverage = std::stof(clouds_str);
                              id(owm_clouds).publish_state(cloud_coverage);
                            
                            }
                          }
                          
                          // Parse weather main condition (e.g., "Clear", "Clouds", "Rain")
                          size_t main_pos = body.find("\"main\":\"");
                          if (main_pos != std::string::npos) {
                            size_t start = main_pos + 8;
                            size_t end = body.find("\"", start);
                            
                            if (end != std::string::npos) {
                              std::string main_weather = body.substr(start, end - start);
                              id(weather_condition).publish_state(main_weather);
                             
                            }
                          }
                          
                          // Parse weather description (e.g., "clear sky", "few clouds")
                          size_t desc_pos = body.find("\"description\":\"");
                          if (desc_pos != std::string::npos) {
                            size_t start = desc_pos + 15;
                            size_t end = body.find("\"", start);
                            
                            if (end != std::string::npos) {
                              std::string description = body.substr(start, end - start);
                              // Capitalize first letter
                              if (!description.empty()) {
                                description[0] = std::toupper(description[0]);
                              }
                              id(weather_description).publish_state(description);

                            }
                          }
                          
                          ESP_LOGD("weather", "Weather data parsing complete - updating display");
                        } else {
                          ESP_LOGW("weather", "Empty response from weather API");
                        }

                    # UPDATE ALL WEATHER LABELS DIRECTLY HERE
                    - lvgl.label.update:
                        id: weather_label
                        text: !lambda |-
                          if (id(weather_condition).has_state()) {
                            return id(weather_condition).state.c_str();
                          }
                          return "Loading...";

                    - lvgl.label.update:
                        id: temperature_label
                        text: !lambda |-
                          if (id(owm_temperature).has_state()) {
                            static char temp_text[60];
                            if (id(owm_feels_like).has_state()) {
                              snprintf(temp_text, sizeof(temp_text), "%.1f°C feels %.1f°C", 
                                      id(owm_temperature).state, id(owm_feels_like).state);
                            } else {
                              snprintf(temp_text, sizeof(temp_text), "Temperature: %.1f°C", id(owm_temperature).state);
                            }
                            return temp_text;
                          }
                          return " --°C";

                    - lvgl.label.update:
                        id: humidity_label
                        text: !lambda |-
                          static char info_text[50];
                          if (id(owm_humidity).has_state()) {
                            snprintf(info_text, sizeof(info_text), " %.0f%% ", 
                                    id(owm_humidity).state);
                          } else {
                            snprintf(info_text, sizeof(info_text), " --%");
                          }
                          return info_text;

                    - lvgl.label.update:
                        id: pressure_label
                        text: !lambda |-
                          static char info_text[50];
                          if ( id(owm_pressure).has_state()) {
                            snprintf(info_text, sizeof(info_text), " %.0fhPa ", 
                                     id(owm_pressure).state);
                          }else {
                            snprintf(info_text, sizeof(info_text), "--%");
                          }
                          return info_text;

                    - lvgl.label.update:
                        id: wind_info_label
                        text: !lambda |-
                          static char wind_text[50];
                          if (id(owm_wind_speed).has_state()) {
                            if (id(owm_wind_gust).has_state() && id(owm_wind_gust).state > id(owm_wind_speed).state) {
                              snprintf(wind_text, sizeof(wind_text), " %.1fm/s (gust %.1f)", 
                                      id(owm_wind_speed).state, id(owm_wind_gust).state);
                            } else {
                              snprintf(wind_text, sizeof(wind_text), "%.1fm/s", id(owm_wind_speed).state);
                            }
                          } else {
                            snprintf(wind_text, sizeof(wind_text), "Wind: --m/s");
                          }
                          return wind_text;

                    - lvgl.label.update:
                        id: visibility_label
                        text: !lambda |-
                          static char vis_text[60];
                          if (id(owm_visibility).has_state() && id(owm_clouds).has_state()) {
                            snprintf(vis_text, sizeof(vis_text), " %.1fkm ", 
                                    id(owm_visibility).state, id(owm_clouds).state);
                          } else if (id(owm_visibility).has_state()) {
                            snprintf(vis_text, sizeof(vis_text), " %.1fkm", id(owm_visibility).state);
                          } else {
                            snprintf(vis_text, sizeof(vis_text), "Visibility: --km");
                          }
                          return vis_text;

                    - logger.log: "All weather display labels updated"

                on_error:
                  then:
                    - logger.log: "Weather API request failed"
          else:
            - logger.log: "WiFi not connected, skipping weather update"

substitutions:
  name: "guition-esp32-s3-4848s040"
  friendly_name: "Guition Smart Light Control"
  device_description: "Guition ESP32-S3-4848S040 Smart Light Controller"
  project_name: "Guition.ESP32_S3_4848S040"
  project_version: "1.0.1"

  lightbulb: "\U000F0335"
  ceiling_light: "\U000F0769"
  lamp: "\U000F06B5"
  floor_lamp: "\U000F08DD"
  string_lights: "\U000F12BA"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  project:
    name: "${project_name}"
    version: "${project_version}"
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      COMPILER_OPTIMIZATION_SIZE: y
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: octal
  speed: 80MHz

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key

ota:
  - platform: esphome
    id: my_ota
    password: !secret ota_password
    on_begin:
      then:
        - logger.log: "OTA start"
        - light.turn_on: backlight
        - lvgl.resume:
        - lvgl.widget.show: popup_obj
        - lvgl.resume:
        - lvgl.widget.redraw:
    on_progress:
        then:
          - lvgl.bar.update:
              id: popup_pb_percentage
              value: !lambda "return (int)x;"
          - lvgl.label.update:
              id: popup_lbl_percentage
              text:
                format: "OTA progress %0.1f%%"
                args: ["x"]
          - lambda: "id(lvgl_comp).loop();"  

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "PhiJo Smart Products Fallback"
    password: !secret wifi_fallback_password
  on_connect:
    then:
      - logger.log: "WiFi connected, starting web server"
      - delay: 1s
      - script.execute: notify_web_portal



time:
  - platform: homeassistant
    id: time_comp
    on_time_sync:
      - script.execute: check_light_schedules
    on_time:
      # Update clock display every minute
      - minutes: '*'
        seconds: 0
        then:
          - script.execute: check_light_schedules
      
      # Check for sunrise/sunset events
      - seconds: 0
        minutes: /1
        then:
          - script.execute: check_light_schedules

web_server:
  port: 80

captive_portal:

# Sun component for sunrise/sunset
sun:
  latitude: !secret latitude
  longitude: !secret longitude
  id: sun_comp

# Sensors for Home Assistant data
sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic
    internal: true

  # Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Strength"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic
    
  # Temperature sensor from Home Assistant
  - platform: homeassistant
    id: outdoor_temp
    entity_id: sensor.weather_temperature
    name: "Outdoor Temperature"
    unit_of_measurement: "Â°C"
    
  # Precipitation sensor from Home Assistant
  - platform: homeassistant
    id: precipitation
    entity_id: sensor.weather_precipitation
    name: "Precipitation"
    unit_of_measurement: "mm"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      id: ip_address
      entity_category: diagnostic
      on_value:
        then:
          - lvgl.label.update:
              id: ip_address_label
              text:
                format: "%s"
                args: [ 'id(ip_address).get_state().c_str()' ]
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      entity_category: diagnostic

color:
  # Create a Home Assistant blue color
  - id: ha_blue
    hex: 51c0f2
  - id: green_color
    red: 0%
    green: 60%
    blue: 0%
  - id: red_color
    red: 80%
    green: 0%
    blue: 0%

# Global variables for timer tracking
globals:
  - id: sw1_off_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw2_off_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw3_off_time
    type: int
    restore_value: yes
    initial_value: "0"
  - id: sw1_before_sunrise
    type: bool
    restore_value: yes
    initial_value: "false"

#-------------------------------------------
# LVGL Interface
#-------------------------------------------
lvgl:
  id: lvgl_comp
  displays:
    - my_display
  touchscreens:
    - touchscreen_id: my_touchscreen
  on_idle:
    - timeout: 15s
      then:
        - logger.log: idle 15s timeout
        - light.turn_off:
            id: backlight
            transition_length: 5s
        - lvgl.pause:
            show_snow: true

  style_definitions:
    - id: style_line
      line_color: 0x0000FF
      line_width: 8
      line_rounded: true
    - id: date_style
      text_font: roboto24
      align: center
      text_color: 0x333333
      bg_opa: cover
      radius: 4
      pad_all: 2
    - id: switch_style_on
      bg_color: 0x00AA00
      text_color: 0xFFFFFF
    - id: switch_style_off
      bg_color: 0x555555
      text_color: 0xCCCCCC

  theme:
    button:
      text_font: roboto24
      scroll_on_focus: true
      radius: 25
      width: 150
      height: 109
      pad_left: 10px
      pad_top: 10px
      pad_bottom: 10px
      pad_right: 10px
      shadow_width: 0
      bg_color: 0x313131
      text_color: 0xB6B6B6
      checked:
        bg_color: 0xCC5E14
        text_color: 0xB6B6B6

  page_wrap: true
  pages:
    - id: main_page
      skip: false
      layout:
        type: flex
        flex_flow: column_wrap
      width: 100%
      bg_color: 0x000000
      bg_opa: cover
      pad_all: 5
      widgets:
        # Title bar
        - obj:
            width: 100%
            height: 60
            bg_color: ha_blue
            bg_opa: cover
            widgets:
              - label:
                  text: "Smart Light Control"
                  text_font: roboto24
                  align: center
                  text_color: 0xFFFFFF
        
        # Switch 1 - Sunrise/Sunset Light
        - button:
            id: sw1_button
            width: 90%
            height: 80
            checkable: true
            widgets:
              - label:
                  text: "Sunrise/Sunset Light"
                  text_font: roboto24
                  align: center
            on_click:
              then:
                - switch.toggle: sw1
            
        # Switch 2 - Seasonal Daytime Light
        - button:
            id: sw2_button
            width: 90%
            height: 80
            checkable: true
            widgets:
              - label:
                  text: "Seasonal Daytime Light"
                  text_font: roboto24
                  align: center
            on_click:
              then:
                - switch.toggle: sw2
                
        # Switch 3 - Weather-Based Light
        - button:
            id: sw3_button
            width: 90%
            height: 80
            checkable: true
            widgets:
              - label:
                  text: "Weather-Based Light"
                  text_font: roboto24
                  align: center
            on_click:
              then:
                - switch.toggle: sw3
                
        # Status display
        - obj:
            width: 90%
            height: 60
            widgets:
              - label:
                  id: status_label
                  text: "Ready"
                  text_color: 0xCCCCCC
                  align: center
                  
        # IP Address display
        - obj:
            widgets:
            - label:
                id: ip_address_label
                align: CENTER
                text: 'Not connected'
                text_color: ha_blue
                y: +10
                
        # OTA popup
        - obj:
            id: popup_obj
            hidden: true
            clickable: false
            x: 0
            y: 0
            width: 100%
            height: 100%
            pad_all: 10
            bg_opa: cover
            widgets:
              - label:
                  id: lbl_popup_title
                  x: 2
                  y: 2
                  text: "OTA in progress"
              - label:
                  id: popup_lbl_percentage
                  x: 2
                  y: 30
                  width: 100%
                  text: "0 %"
              - bar:
                  id: popup_pb_percentage
                  x: 2
                  y: 60
                  width: 100%
                  height: 10
                  max_value: 100
                  min_value: 0
                  value: 0

#-------------------------------------------
# Internal outputs
#-------------------------------------------
output:
  # Backlight LED
  - platform: ledc
    pin: GPIO38
    id: GPIO38
    frequency: 100Hz

  # Built in 240v relay
  - id: internal_relay_1
    platform: gpio
    pin: 40

  # Additional relays (3 relay model)
  - id: internal_relay_2
    platform: gpio
    pin: 2
  - id: internal_relay_3
    platform: gpio
    pin: 1

#-------------------------------------------
# Internal lights and switches
#-------------------------------------------
light:
  - platform: monochromatic
    output: GPIO38
    name: Backlight
    id: backlight
    restore_mode: ALWAYS_ON

switch:
  - platform: output
    id: sw1
    name: "Sunrise/Sunset Light"
    output: internal_relay_1
    on_turn_on:
      then:
        - lvgl.widget.update:
            id: sw1_button
            state:
              checked: true
        - lvgl.label.update:
            id: status_label
            text: "Sunrise/Sunset Light ON"
            text_color: green_color
    on_turn_off:
      then:
        - lvgl.widget.update:
            id: sw1_button
            state:
              checked: false
        - lvgl.label.update:
            id: status_label
            text: "Sunrise/Sunset Light OFF"
            text_color: red_color
            
  - platform: output
    id: sw2
    name: "Seasonal Daytime Light"
    output: internal_relay_2
    on_turn_on:
      then:
        - lvgl.widget.update:
            id: sw2_button
            state:
              checked: true
        - lvgl.label.update:
            id: status_label
            text: "Seasonal Daytime Light ON"
            text_color: green_color
    on_turn_off:
      then:
        - lvgl.widget.update:
            id: sw2_button
            state:
              checked: false
        - lvgl.label.update:
            id: status_label
            text: "Seasonal Daytime Light OFF"
            text_color: red_color
            
  - platform: output
    id: sw3
    name: "Weather-Based Light"
    output: internal_relay_3
    on_turn_on:
      then:
        - lvgl.widget.update:
            id: sw3_button
            state:
              checked: true
        - lvgl.label.update:
            id: status_label
            text: "Weather-Based Light ON"
            text_color: green_color
    on_turn_off:
      then:
        - lvgl.widget.update:
            id: sw3_button
            state:
              checked: false
        - lvgl.label.update:
            id: status_label
            text: "Weather-Based Light OFF"
            text_color: red_color

#-------------------------------------------
# Scripts for automation logic
#-------------------------------------------
script:
  - id: notify_web_portal
    then:
      - lvgl.label.update:
          id: status_label
          text: "Web portal active at http://${ip_address.state}"
          text_color: ha_blue
      - logger.log: 
          format: "Web portal active at http://%s"
          args: ['id(ip_address).state.c_str()']

  - id: check_light_schedules
    then:
      - lambda: |-
          auto now = id(time_comp).now();
          
          // ---- SWITCH 1: SUNRISE/SUNSET CONTROL ----
          
          // Check for sunrise events
          auto sunrise_opt = id(sun_comp).sunrise(0.0);  // 0.0 degrees elevation
          if (sunrise_opt.has_value()) {
            auto sunrise = sunrise_opt.value();
            
            // Check if it's 30 minutes before sunrise (between 30 and 29 minutes before)
            if (sunrise.timestamp - now.timestamp <= 1800 && 
                sunrise.timestamp - now.timestamp > 1740 && 
                !id(sw1_before_sunrise)) {
              // Turn on light 30 minutes before sunrise
              id(sw1).turn_on();
              id(sw1_before_sunrise) = true;
              id(lvgl_comp).loop();
            }
            
            // Check if it's sunrise time (within 1 minute)
            if (abs(sunrise.timestamp - now.timestamp) < 60 && 
                id(sw1_before_sunrise)) {
              // Turn off light at sunrise
              id(sw1).turn_off();
              id(sw1_before_sunrise) = false;
              id(lvgl_comp).loop();
            }
          }
          
          // Check for sunset events
          auto sunset_opt = id(sun_comp).sunset(0.0);  // 0.0 degrees elevation
          if (sunset_opt.has_value()) {
            auto sunset = sunset_opt.value();
            
            // Check if it's sunset time (within 1 minute)
            if (abs(sunset.timestamp - now.timestamp) < 60) {
              // Turn on light at sunset and set timer for 2 hours
              id(sw1).turn_on();
              id(sw1_off_time) = now.timestamp + 7200; // 2 hours
              id(lvgl_comp).loop();
            }
          }
          
          // Check if it's time to turn off SW1 after sunset
          if (id(sw1).state && !id(sw1_before_sunrise) && 
              now.timestamp >= id(sw1_off_time) && id(sw1_off_time) > 0) {
            id(sw1).turn_off();
            id(sw1_off_time) = 0;
            id(lvgl_comp).loop();
          }
          
          // ---- SWITCH 2: SEASONAL DAYTIME CONTROL ----
          
          // Run the seasonal timer at noon
          if (now.hour == 12 && now.minute == 0) {
            int month = now.month;
            // Summer: Mar-Sep (6 hours), Winter: Oct-Feb (1 hour)
            int hours = (month >= 3 && month <= 9) ? 6 : 1;
            
            // Temperature adjustment if sensor is available
            if (id(outdoor_temp).has_state()) {
              float temp = id(outdoor_temp).state;
              if (temp > 22.0) {
                // Add 10% more time for each 10Â°C above 22Â°C
                float extra_time = (temp - 22.0) * 0.1;
                hours = hours * (1.0 + extra_time);
              }
            }
            
            // Turn on SW2 and set timer
            id(sw2).turn_on();
            id(sw2_off_time) = now.timestamp + hours * 3600;
            id(lvgl_comp).loop();
          }
          
          // Check if it's time to turn off SW2
          if (id(sw2).state && now.timestamp >= id(sw2_off_time) && id(sw2_off_time) > 0) {
            id(sw2).turn_off();
            id(sw2_off_time) = 0;
            id(lvgl_comp).loop();
          }
          
          // ---- SWITCH 3: WEATHER-BASED CONTROL ----
          
          // Check weather conditions for SW3 if sensors are available
          if (id(outdoor_temp).has_state() && id(precipitation).has_state()) {
            float temp = id(outdoor_temp).state;
            float rain = id(precipitation).state;
            
            // Activate if temperature is high or heavy rain
            if ((temp > 35.0 || rain > 10.0) && !id(sw3).state) {
              id(sw3).turn_on();
              id(sw3_off_time) = now.timestamp + 7200; // 2 hours
              id(lvgl_comp).loop();
            }
          }
          
          // Check if it's time to turn off SW3
          if (id(sw3).state && now.timestamp >= id(sw3_off_time) && id(sw3_off_time) > 0) {
            id(sw3).turn_off();
            id(sw3_off_time) = 0;
            id(lvgl_comp).loop();
          }

#-------------------------------------------
# Graphics and Fonts
#-------------------------------------------
font:
  - file: "gfonts://Roboto"
    id: roboto24
    size: 24
    bpp: 4
    extras:
      - file: "fonts/materialdesignicons-webfont.ttf"
        glyphs:
          [
            "\U000F0335", # mdi-lightbulb
            "\U000F0769", # mdi-ceiling-light
            "\U000F06B5", # mdi-lamp
            "\U000F08DD", # mdi-floor-lamp
            "\U000F12BA", # mdi-string-lights
          ]

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: light40
    size: 40
    bpp: 4
    glyphs: [
        "\U000F0335", # mdi-lightbulb
        "\U000F0769", # mdi-ceiling-light
        "\U000F06B5", # mdi-lamp
        "\U000F08DD", # mdi-floor-lamp
        "\U000F12BA", # mdi-string-lights
      ]

#-------------------------------------------
# Touchscreen gt911 i2c
#-------------------------------------------
i2c:
  - id: bus_a
    sda: GPIO19
    scl: GPIO45

touchscreen:
  platform: gt911
  transform:
    mirror_x: false
    mirror_y: false
  id: my_touchscreen
  display: my_display

  on_touch:
    - lambda: |-
        ESP_LOGD("touch", "Touch at (%d, %d)", touch.x, touch.y);
  on_release:
    then:
      - if:
          condition: lvgl.is_paused
          then:
            - light.turn_on: backlight
            - lvgl.resume:
            - lvgl.widget.redraw:

#-------------------------------------------
# Display st7701s spi
#-------------------------------------------
spi:
  - id: lcd_spi
    clk_pin: GPIO48
    mosi_pin: GPIO47

display:
  - platform: st7701s
    id: my_display
    update_interval: never
    auto_clear_enabled: False
    spi_mode: MODE3
    color_order: RGB
    invert_colors: False
    dimensions:
      width: 480
      height: 480
    cs_pin: 39
    de_pin: 18
    hsync_pin: 16
    vsync_pin: 17
    pclk_pin: 21
    pclk_frequency: 12MHz
    pclk_inverted: False
    hsync_pulse_width: 8
    hsync_front_porch: 10
    hsync_back_porch: 20
    vsync_pulse_width: 8
    vsync_front_porch: 10
    vsync_back_porch: 10
    init_sequence:
      - 1
      # Custom sequences are an array, first byte is command, the rest are data.
      - [0xFF, 0x77, 0x01, 0x00, 0x00, 0x10] # CMD2_BKSEL_BK0
      - [0xCD, 0x00] # disable MDT flag
    data_pins:
      red:
        - 11 #r1
        - 12 #r2
        - 13 #r3
        - 14 #r4
        - 0 #r5
      green:
        - 8 #g0
        - 20 #g1
        - 3 #g2
        - 46 #g3
        - 9 #g4
        - 10 #g5
      blue:
        - 4 #b1
        - 5 #b2
        - 6 #b3
        - 7 #b4
        - 15 #b5